"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[6225],{3624:function(e,t,n){n.d(t,{Z:function(){return N}});var o=n(7294),a=n(8650),i=n.n(a),l=n(1597),s=n(811),r=n(87),c=n(5900),d=n.n(c),h=function(e){var t,n=e.title,a=e.theme,i=e.tabs,l=void 0===i?[]:i;return o.createElement("div",{className:d()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=l.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===a,t))},o.createElement("div",{className:"bx--grid"},o.createElement("div",{className:"bx--row"},o.createElement("div",{className:"bx--col-lg-12"},o.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},n)))))},m=function(e){var t=e.relativePagePath,n=e.repository,a=(0,l.useStaticQuery)("1364590287").site.siteMetadata.repository,i=n||a,s=i.baseUrl,r=i.subDirectory,c=s+"/edit/"+i.branch+r+"/src/pages"+t;return s?o.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},o.createElement("div",{className:"bx--col"},o.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},p=n(4703),u=n(1721),f=function(e){function t(){return e.apply(this,arguments)||this}return(0,u.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,n=e.tabs,a=e.slug,s=a.split("/").filter(Boolean).slice(-1)[0],r=n.map((function(e){var t,n=i()(e,{lower:!0,strict:!0}),r=n===s,c=new RegExp(s+"/?(#.*)?$"),h=a.replace(c,n);return o.createElement("li",{key:e,className:d()((t={},t["PageTabs-module--selected-item--aBB0K"]=r,t),"PageTabs-module--list-item--024o6")},o.createElement(l.Link,{className:"PageTabs-module--link--Kz-7R",to:""+h},e))}));return o.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},o.createElement("div",{className:"bx--grid"},o.createElement("div",{className:"bx--row"},o.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},o.createElement("nav",{"aria-label":t},o.createElement("ul",{className:"PageTabs-module--list--xLqxG"},r))))))},t}(o.Component),k=f,g=n(7296),w=n(5387),v=n(3732),y=function(e){var t=e.date,n=new Date(t);return t?o.createElement(v.X2,{className:"last-modified-date-module--row--XJoYQ"},o.createElement(v.sg,null,o.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",n.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},N=function(e){var t=e.pageContext,n=e.children,a=e.location,c=e.Title,d=t.frontmatter,u=void 0===d?{}:d,f=t.relativePagePath,v=t.titleType,N=u.tabs,b=u.title,T=u.theme,E=u.description,P=u.keywords,x=u.date,I=(0,w.Z)().interiorTheme,O=(0,l.useStaticQuery)("2456312558").site.pathPrefix,C=O?a.pathname.replace(O,""):a.pathname,A=N?C.split("/").filter(Boolean).slice(-1)[0]||i()(N[0],{lower:!0}):"",S=T||I;return o.createElement(r.Z,{tabs:N,homepage:!1,theme:S,pageTitle:b,pageDescription:E,pageKeywords:P,titleType:v},o.createElement(h,{title:c?o.createElement(c,null):b,label:"label",tabs:N,theme:S}),N&&o.createElement(k,{title:b,slug:C,tabs:N,currentTab:A}),o.createElement(g.Z,{padded:!0},n,o.createElement(m,{relativePagePath:f}),o.createElement(y,{date:x})),o.createElement(p.Z,{pageContext:t,location:a,slug:C,tabs:N,currentTab:A}),o.createElement(s.Z,null))}},1713:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return s},default:function(){return d}});var o=n(3366),a=(n(7294),n(4983)),i=n(3624),l=["components"],s={},r={_frontmatter:s},c=i.Z;function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)(c,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Initiating a workflow for a given MBO can be done by using the following API:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"POST /oslc/os/<os name>/{rest id}?action=workflow:<workflow name> \nx-method-override: PATCH\n")),(0,a.kt)("p",null,"This invokes the named workflow in the context of the MBO that is identified in the URI."),(0,a.kt)("h2",null,"Handling Task Nodes"),(0,a.kt)("p",null,"After initiation, the workflow may end up in a task node, which generates an assignment. The following APIs shows how you can handle assignments and where you can fetch assignments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiwfassignment?oslc.select=*\n")),(0,a.kt)("p",null,"All the assignments for that user are fetched. Each assignment has a positive action and a negative action to take as shown in the following example JSON:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "description": "mydesc",\n    "wfassignmentid": "myid",\n    "href": "http://myhref",\n    "wfaction": [\n      {\n        "instruction": "myinstruction1",\n        "ispositive": false\n      },\n      {\n        "instruction": "myinstruction2",\n        "ispositive": true\n      }\n    ]\n  }\n  ...\n]\n')),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"wfaction")," JSON contains the positive and negative actions and you choose one of those actions."),(0,a.kt)("p",null,"The following API call shows how to take the positive action."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"POST /oslc/os/mxapiwfassignment/{id}?action=wsmethod:completeAssignment \nx-method-override: PATCH\n")),(0,a.kt)("p",null,"Body:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "memo": "some memo",\n  "accepted": true\n}\n')),(0,a.kt)("p",null,"To take up the negative route, you can just set the accepted flag to false in the JSON and POST to the same href."),(0,a.kt)("h2",null,"Handling Input Nodes"),(0,a.kt)("p",null,"Input nodes provide you with interactive options to choose from in a workflow path. You do not need to choose anything, in which case the workflow stays in that same state. If the workflow framework looks ahead and sees an input node as the next node, the rest API response for the current node (say that was a task assignment that you accepted or rejected) is returned."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A response JSON that has the details of the options that the input node provides. The consuming client code is supposed to use those options to let you decide which option to chose."),(0,a.kt)("li",{parentName:"ol"},"A response location header with the URL to POST the users choice to.")),(0,a.kt)("p",null,"The response JSON may look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "member": [\n    {\n      "actionid": "myactionid1",\n      "instruction": "myinstruction1"\n    },\n    {\n      "actionid": "myactionid2",\n      "instruction": "myinstruction2"\n    }\n  ],\n  "nodetype": "INPUT",\n  "internalnodetype": "WFINPUT"\n}\n')),(0,a.kt)("p",null,"Note that the input node type says that its ",(0,a.kt)("inlineCode",{parentName:"p"},"WFINPUT"),". This information can be used by the consuming code (say a mobile app) to display a generic UI to represent these options."),(0,a.kt)("p",null,"The following API call describes how to choose an option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"POST <location uri>\n")),(0,a.kt)("p",null,"Body:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "actionid": "choose one of the action id from the json above",\n  "memo": "some memo"\n}\n')),(0,a.kt)("p",null,"Note if this call is not made, the workflow stays with the current node (ie the node previous to the input node) and does not move to the next node. In essence the input node is a transient node which is only available for processing within that context of the previous node."),(0,a.kt)("h2",null,"Handling Interaction Nodes"),(0,a.kt)("p",null,"Interaction nodes are Maximo UI dialogs, applications, or tabs that are presented for you to take an action by using that UI artifact. Unlike an input node, an interaction node is not a transient node. This implies that the workflow engine has moved to the this node from the previous node."),(0,a.kt)("p",null,"When the workflow lands into this node, the response JSON from the previous call indicates the details of the interaction node, presenting the information from the ",(0,a.kt)("inlineCode",{parentName:"p"},"WFINTERACTION")," table for that node. This identifies (using the JSON property ",(0,a.kt)("inlineCode",{parentName:"p"},"internalnodetype")," with a value of ",(0,a.kt)("inlineCode",{parentName:"p"},"WFINTERACTION")," ) the client code that provides an equivalent interface for the dialog or application. Like the case with the input node, the rest framework generates a URI (set the in the response location header) for the client code to respond back to the interaction such that the workflow instance can move to the next node in the path."),(0,a.kt)("p",null,"If you ignore this node, the system just moves on to the next node. To indicate that the interaction node job is complete, you need to re-route the workflow by pressing the workflow route button in the Maximo Asset Management application. To simulate that in the API realm, the client code needs to apply the following api call:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"POST <location uri>\n")),(0,a.kt)("p",null,"Body:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "interactioncomplete": 1\n}\n')),(0,a.kt)("p",null,"This indicates to the workflow engine that the interaction is complete."),(0,a.kt)("h2",null,"Handling Wait Nodes"),(0,a.kt)("p",null,"Wait nodes are listeners to the MBO (that is being workflowed) event. Effectively, the workflow waits on this event and when the event eventually happens, it moves to the next node. There is no handling of APIs for this node as this is backend event driven. So if an event comes from any API calls, MIF calls, or UI call for that MBO, the workflow moves to the next node in the path if the condition is met."),(0,a.kt)("h2",null,"Handling Condition Nodes"),(0,a.kt)("p",null,"Condition nodes are automatically evaluated by the workflow engine and the engine moves to the next node in the path after condition evaluation."))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-workflow-workflow-mdx-3ea96c47bc76fb655d72.js.map
"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[259],{3624:function(e,t,a){a.d(t,{Z:function(){return y}});var n=a(7294),o=a(8650),s=a.n(o),r=a(1597),i=a(811),l=a(87),c=a(5900),m=a.n(c),p=function(e){var t,a=e.title,o=e.theme,s=e.tabs,r=void 0===s?[]:s;return n.createElement("div",{className:m()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=r.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===o,t))},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12"},n.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},d=function(e){var t=e.relativePagePath,a=e.repository,o=(0,r.useStaticQuery)("1364590287").site.siteMetadata.repository,s=a||o,i=s.baseUrl,l=s.subDirectory,c=i+"/edit/"+s.branch+l+"/src/pages"+t;return i?n.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},n.createElement("div",{className:"bx--col"},n.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},h=a(4703),u=a(1721),k=function(e){function t(){return e.apply(this,arguments)||this}return(0,u.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,o=e.slug,i=o.split("/").filter(Boolean).slice(-1)[0],l=a.map((function(e){var t,a=s()(e,{lower:!0,strict:!0}),l=a===i,c=new RegExp(i+"/?(#.*)?$"),p=o.replace(c,a);return n.createElement("li",{key:e,className:m()((t={},t["PageTabs-module--selected-item--aBB0K"]=l,t),"PageTabs-module--list-item--024o6")},n.createElement(r.Link,{className:"PageTabs-module--link--Kz-7R",to:""+p},e))}));return n.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},n.createElement("nav",{"aria-label":t},n.createElement("ul",{className:"PageTabs-module--list--xLqxG"},l))))))},t}(n.Component),f=k,b=a(7296),g=a(5387),w=a(3732),N=function(e){var t=e.date,a=new Date(t);return t?n.createElement(w.X2,{className:"last-modified-date-module--row--XJoYQ"},n.createElement(w.sg,null,n.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},y=function(e){var t=e.pageContext,a=e.children,o=e.location,c=e.Title,m=t.frontmatter,u=void 0===m?{}:m,k=t.relativePagePath,w=t.titleType,y=u.tabs,v=u.title,E=u.theme,C=u.description,T=u.keywords,x=u.date,P=(0,g.Z)().interiorTheme,S=(0,r.useStaticQuery)("2456312558").site.pathPrefix,O=S?o.pathname.replace(S,""):o.pathname,j=y?O.split("/").filter(Boolean).slice(-1)[0]||s()(y[0],{lower:!0}):"",M=E||P;return n.createElement(l.Z,{tabs:y,homepage:!1,theme:M,pageTitle:v,pageDescription:C,pageKeywords:T,titleType:w},n.createElement(p,{title:c?n.createElement(c,null):v,label:"label",tabs:y,theme:M}),y&&n.createElement(f,{title:v,slug:O,tabs:y,currentTab:j}),n.createElement(b.Z,{padded:!0},a,n.createElement(d,{relativePagePath:k}),n.createElement(N,{date:x})),n.createElement(h.Z,{pageContext:t,location:o,slug:O,tabs:y,currentTab:j}),n.createElement(i.Z,null))}},1951:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return i},default:function(){return m}});var n=a(3366),o=(a(7294),a(4983)),s=a(3624),r=["components"],i={},l={_frontmatter:i},c=s.Z;function m(e){var t=e.components,a=(0,n.Z)(e,r);return(0,o.kt)(c,Object.assign({},l,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The rest APIs describe the resource using JSON schema standards. Maximo metadata contains more information than JSON schema supports. Therefore, the schema specification is extended with Maximo specific properties that contains more information from the Maximo metadata. Schemaâ€™s can be accessed in couple of ways using the REST APIs. A ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonschemas")," route provides schema to any object structure. The following example shows that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /oslc/jsonschemas/mxapiwodetail\n")),(0,o.kt)("p",null,"The JSON schema for the root object of the object structure is returned and contains links to the child objects, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"INVRESERVE"),". To get the schema for all the objects in the OS, you need to include the request parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"oslc.select=*"),". This fetches all the child objects inline into the root object schema while retaining the hierarchy structure."),(0,o.kt)("p",null,"Note also that the properties in the schema map to the MBO attributes (which are included as part of the OS). They also have the JSON schema type as well as the ",(0,o.kt)("inlineCode",{parentName:"p"},"subtype")," that has the more specific Maximo type."),(0,o.kt)("p",null,"Additionally, you can specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"oslc.select")," clause to filter out the part of the object structure that you need. An example is shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /oslc/jsonschemas/mxapiwodetail?oslc.select=wonum,status,invreserve{*}\n")),(0,o.kt)("p",null,"Details about the ",(0,o.kt)("inlineCode",{parentName:"p"},"workorder"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"wonum"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," attributes and all attributes from the ",(0,o.kt)("inlineCode",{parentName:"p"},"invreserve")," child object are provided ."),(0,o.kt)("p",null,"There is an alternative method to get the schema while you are fetching details in a collection query. The following query is a simple collection query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /oslc/os/mxwodetail?oslc.select=wonum,status,description,invreserve{itemnum},asset.assetnum,asset.status\n")),(0,o.kt)("p",null,"In addition to fetching the work order records, if you want the schema for this ",(0,o.kt)("inlineCode",{parentName:"p"},"oslc.select")," clause that fetches part details from ",(0,o.kt)("inlineCode",{parentName:"p"},"workorder")," (",(0,o.kt)("inlineCode",{parentName:"p"},"wonum")," etc), part from ",(0,o.kt)("inlineCode",{parentName:"p"},"invreserve"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"part")," from asset (which is not even part of the OS), by using the dot notation,  you add the query parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"addschema=1")," to the request URL. When you add the parameter, the response JSON objects ",(0,o.kt)("inlineCode",{parentName:"p"},"responseInfo")," property will have the schema inlined inside it. This returns the data and the metadata in the same REST API call. Note that this schema will not be fetched for the next page request beacause the next page URL will not have the ",(0,o.kt)("inlineCode",{parentName:"p"},"addschema=1")," in the URI. However, if you add that query parameter explicitly, it fetches the schema for any page."),(0,o.kt)("p",null,"Support for MBO schemas is available for use cases where you need to fetch a related MboSet using the REST API without using the ",(0,o.kt)("inlineCode",{parentName:"p"},"responseos")," query parameter. For example, if you want to evaluate the ",(0,o.kt)("inlineCode",{parentName:"p"},"getlist")," API for an attribute, such as the status for a given work order, you might use the following API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiwodetail/{id}/getlist~status?oslc.select=*\n")),(0,o.kt)("p",null,"This API returns the possible list of status values for that work order state. The response is a serialized version of the ",(0,o.kt)("inlineCode",{parentName:"p"},"synonymdomain")," MBO and is not an object structure. If you want to have a schema for the response, you can add the query parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"&addschema=1"),", which works for the response MboSet, without needing to set it as an object structure."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiwodetail/{id}/getlist~status?oslc.select=*&addschema=1\n")),(0,o.kt)("p",null,"This MBO schema can also be accessed standalone by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonmboschemas")," route. The following example shows a sample call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /oslc/jsonmboschemas/asset?oslc.select=assetnum,status,location.description,location.status,rel.openwo{wonum,status}\n")),(0,o.kt)("p",null,"The sample call returns the JSON schema for ",(0,o.kt)("inlineCode",{parentName:"p"},"asset")," MBO with the attributes ",(0,o.kt)("inlineCode",{parentName:"p"},"assetnum")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"status"),", along with the related attributes from ",(0,o.kt)("inlineCode",{parentName:"p"},"location")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"workorder")," (using the ",(0,o.kt)("inlineCode",{parentName:"p"},"rel.openwo"),")."),(0,o.kt)("p",null,"Similarly, when you access some relation as a Mbo(Set), you can apply JSON schemas without using an object structure. The following example shows the use case:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapipo/{rest id}/vendor?addschema=1&oslc.select=*\n")),(0,o.kt)("p",null,"The related vendor for the ",(0,o.kt)("inlineCode",{parentName:"p"},"PO")," is accessed and you do not use any ",(0,o.kt)("inlineCode",{parentName:"p"},"responseos")," query parameter to render the response to as an OS, but you can access the schema of the ",(0,o.kt)("inlineCode",{parentName:"p"},"vendor")," (which is the ",(0,o.kt)("inlineCode",{parentName:"p"},"companies")," MBO)."))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-jsonschema-jsonschema-mdx-224a495afa61cdbd728c.js.map
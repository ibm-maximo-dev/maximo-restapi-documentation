"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[4369],{3624:function(e,t,a){a.d(t,{Z:function(){return v}});var o=a(7294),n=a(8650),i=a.n(n),l=a(1597),s=a(811),r=a(87),c=a(5900),h=a.n(c),d=function(e){var t,a=e.title,n=e.theme,i=e.tabs,l=void 0===i?[]:i;return o.createElement("div",{className:h()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=l.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===n,t))},o.createElement("div",{className:"bx--grid"},o.createElement("div",{className:"bx--row"},o.createElement("div",{className:"bx--col-lg-12"},o.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},u=function(e){var t=e.relativePagePath,a=e.repository,n=(0,l.useStaticQuery)("1364590287").site.siteMetadata.repository,i=a||n,s=i.baseUrl,r=i.subDirectory,c=s+"/edit/"+i.branch+r+"/src/pages"+t;return s?o.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},o.createElement("div",{className:"bx--col"},o.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},m=a(4703),p=a(1721),g=function(e){function t(){return e.apply(this,arguments)||this}return(0,p.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,n=e.slug,s=n.split("/").filter(Boolean).slice(-1)[0],r=a.map((function(e){var t,a=i()(e,{lower:!0,strict:!0}),r=a===s,c=new RegExp(s+"/?(#.*)?$"),d=n.replace(c,a);return o.createElement("li",{key:e,className:h()((t={},t["PageTabs-module--selected-item--aBB0K"]=r,t),"PageTabs-module--list-item--024o6")},o.createElement(l.Link,{className:"PageTabs-module--link--Kz-7R",to:""+d},e))}));return o.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},o.createElement("div",{className:"bx--grid"},o.createElement("div",{className:"bx--row"},o.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},o.createElement("nav",{"aria-label":t},o.createElement("ul",{className:"PageTabs-module--list--xLqxG"},r))))))},t}(o.Component),f=g,b=a(7296),w=a(5387),k=a(3732),y=function(e){var t=e.date,a=new Date(t);return t?o.createElement(k.X2,{className:"last-modified-date-module--row--XJoYQ"},o.createElement(k.sg,null,o.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},v=function(e){var t=e.pageContext,a=e.children,n=e.location,c=e.Title,h=t.frontmatter,p=void 0===h?{}:h,g=t.relativePagePath,k=t.titleType,v=p.tabs,N=p.title,E=p.theme,T=p.description,x=p.keywords,q=p.date,P=(0,w.Z)().interiorTheme,L=(0,l.useStaticQuery)("2456312558").site.pathPrefix,S=L?n.pathname.replace(L,""):n.pathname,C=v?S.split("/").filter(Boolean).slice(-1)[0]||i()(v[0],{lower:!0}):"",j=E||P;return o.createElement(r.Z,{tabs:v,homepage:!1,theme:j,pageTitle:N,pageDescription:T,pageKeywords:x,titleType:k},o.createElement(d,{title:c?o.createElement(c,null):N,label:"label",tabs:v,theme:j}),v&&o.createElement(f,{title:N,slug:S,tabs:v,currentTab:C}),o.createElement(b.Z,{padded:!0},a,o.createElement(u,{relativePagePath:g}),o.createElement(y,{date:q})),o.createElement(m.Z,{pageContext:t,location:n,slug:S,tabs:v,currentTab:C}),o.createElement(s.Z,null))}},9876:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return s},default:function(){return h}});var o=a(3366),n=(a(7294),a(4983)),i=a(3624),l=["components"],s={},r={_frontmatter:s},c=i.Z;function h(e){var t=e.components,a=(0,o.Z)(e,l);return(0,n.kt)(c,Object.assign({},r,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"When talking about api performance, we are mostly looking at reducing the number of calls that we are making from client (browser based power app/integration clients) to Maximo Server and Maximo Server to Maximo database.\nBelow we discuss the common programming mistakes that are made during app or integration development regarding the usage of the apis."),(0,n.kt)("h2",null,"Duplicate calls"),(0,n.kt)("p",null,"Analyze using the network tab the requests that are being made from your application. You may see a bunch of duplicate requests which maybe the by-product of erroneous js coding/event handling. "),(0,n.kt)("h2",null,"Look for pageSize"),(0,n.kt)("p",null,"For example - do not give a big pagesize when you are going to show only a few. General rule of thumb - make it 1:2 - so if you are planning to show only 10 - give a pageSize of 20."),(0,n.kt)("h2",null,"Look out for attributes in oslc.select clause"),(0,n.kt)("h3",null,"Dot notation attributes"),(0,n.kt)("p",null,"For example say we are fetching assets and the request looks like oslc.select=assetnum,description,location.description,location.location,site.description,siteid - you would perform much worse than if the query was oslc.select=assetnum,description,siteid,location - why? This is because for a pageSize of N, the former is going to fire 2N+1 sqls to the database as opposed to the latter - which will be always 1 sql. The former select will fire a sql to location table anf site table for every asset it selects. So if you were getting 100 assets - you will get 1+100 (for locations)+ 100 (for site) = 201 sqls. Also pay attention that location is a native attribute of the asset table - so using ",(0,n.kt)("inlineCode",{parentName:"p"},"location.location")," will just make it go and make 100 calls for nothing. You could have just done ",(0,n.kt)("inlineCode",{parentName:"p"},"location")," instead. In this case however it does not make a differnce as you are already fetching ",(0,n.kt)("inlineCode",{parentName:"p"},"location.description")," - so you would have taken that hit anyways."),(0,n.kt)("h3",null,"oslc.select=*"),(0,n.kt)("p",null,"This is a common mistake we do. We are selecting all attributes from an OS or Mbo - when we may need only a few. "),(0,n.kt)("h3",null,"Domain description"),(0,n.kt)("p",null,"This is a common requirement - we get domain descriptions for status and other domain bound attributes. For this, the rest api framework maintains a ML cache to store the descriptions for different domains. Whenever the framework detects the domain bound attributes - it automatically adds the description (from the cache) to the response json. Unfortunately we are seeing a lot of the rest api calls include a select clause that refers to the domain by a relationship - thus bypassing the cache completely -> resulting in yet another sql."),(0,n.kt)("h2",null,"Fetching count"),(0,n.kt)("p",null,"There is a simple api call to fetch count ",(0,n.kt)("inlineCode",{parentName:"p"},"<rest collection url to the resource>?count=1"),". When we fetch count, we donot need to fetch anything else with it, ie we should not be using oslc.select or collectioncount=1 as they would result it mbos getting initialized which will result in unnecessary sqls. "),(0,n.kt)("p",null,"If we need to fetch count for a set of child objects along with data from the parent, we can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"oslc.select=<parent attributes>, <relation name>._dbcount"),", where relation_name is the maximo relation name to the related object."),(0,n.kt)("p",null,"if we just need to fetch count of a child object with no data from parent, use the GET call like ",(0,n.kt)("inlineCode",{parentName:"p"},"/os/<os name>/{id}/<relation to child object>?count=1")),(0,n.kt)("h2",null,"Fetching data for other tabs while in one tab"),(0,n.kt)("p",null,"In an multi-tabbed application, there is no need to fetch data for tabs that are not visible yet. Just-in-time fetching helps improve the app loading performance. "),(0,n.kt)("h2",null,"Lookout for properties header for POST requests"),(0,n.kt)("p",null,"This is similar to oslc.select in GET cases. We should look out for things that we do not need - for example domain descriptions, imagelib references etc which are automatically populated. We donot need to explicitly specify them. Specifying them are costlier. Also avoid doing properties=*."),(0,n.kt)("h2",null,"Sorting on non-indexed attribute"),(0,n.kt)("p",null,"One of the common mistakes we see is rest queries use of oslc.orderBy clause sorting on non-indexed attributes like say ",(0,n.kt)("inlineCode",{parentName:"p"},"description"),".Sorting on attributes that is not indexed will have a performance cost on the query. While developing the apps, consider not sorting by default and just use the order that the database provides. Let the end user drive the sorting. "),(0,n.kt)("h2",null,"ignorecollectionref=1 query parameter"),(0,n.kt)("p",null,"This is another area for optimization. We can set this query parameter to 1 and reduce the size of the json payload response in cases when we are requesting data from a big OS like MXAPIWODETAIL. This will remove the collection ref to child collections from the response json. We should leverage it in our list page collections."),(0,n.kt)("h2",null,"Evaluating/filtering data at the server side"),(0,n.kt)("p",null,"Look for evaluating/filtering data at the server side as opposed to client side and only transfer required data to the client, effectively filter at the server as opposed to getting all data and then filtering on the client side."),(0,n.kt)("h2",null,"Optimize selecting related mbos"),(0,n.kt)("p",null,'This use case deals with situations where we are getting information from a related mbo on a collection of selected mbos. For example we try to get information on locations and sites for a given set of Assets. Now if from a collection of 100 Assets, we have 20 distinct Locations and 5 distinct sites – we will stil end up firing 100 + 100 = 200 sql queries for each asset loading the site and location individually. To optimize that we need to make sure we have entries in the apilinkedobject table for the relations in use from Asset->Location and Asset->Site. A sample Asset->Location is shown below. This tells the system that Asset is related to location using the “matchexpr""" which helps the system to maintain a transient cache (of locations) while creating the json from the collection of Assets.'),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parent"),(0,n.kt)("th",{parentName:"tr",align:null},"Relation"),(0,n.kt)("th",{parentName:"tr",align:null},"Matchexpr"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ASSET"),(0,n.kt)("td",{parentName:"tr",align:null},"LOCATION"),(0,n.kt)("td",{parentName:"tr",align:null},"location,siteid")))),(0,n.kt)("p",null,"This will help reduce the number of queries to just the needed 20+5 based on unique locations and sites."),(0,n.kt)("h2",null,"Aggressive fetching of data vs fetching data as needed"),(0,n.kt)("p",null,"Avoid fetching all children objects in an object structure at once. Consider fetching those as needed basis ie if the requested by the end user. For example to fetch PO such that we can show it in a UI table/List – we maynot need to fetch the POLINES and Terms. They can be fetched after the PO’s are populated and as the user wants to drill down into the individual PO’s. This rest api provides various ways to enumerate a child relationship and those can be leveraged for this."),(0,n.kt)("h2",null,"Troubleshooting Performance"),(0,n.kt)("p",null,"This section discusses how to debug and generate the SQL for your rest calls. "),(0,n.kt)("p",null,"One of the ways we can troubleshoot performance of an api call is by checking the amount of sql its generating. The simplest way to do that would be to enable thread logging for the context “oslc” and for the user you intend to use for testing. This can be done using the “Custom Logging” action from the logging app -> Thread Logging. Note you need to enable the logger type – in this case SQL. Note if you want to track other loggers feel free to set them up as well here for the “oslc” context. Once you start making the rest api calls – you should see a file getting generated under your application server working directory that will have a naming convention like “OSLC_XXXXX.log” and that will contain all the sqls and other logs that this api call generated"))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-performance-mdx-6c7a1e18072a4b3224c2.js.map
"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[5913],{3624:function(e,t,a){a.d(t,{Z:function(){return y}});var n=a(7294),l=a(8650),r=a.n(l),o=a(1597),i=a(811),s=a(87),u=a(5900),d=a.n(u),g=function(e){var t,a=e.title,l=e.theme,r=e.tabs,o=void 0===r?[]:r;return n.createElement("div",{className:d()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=o.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===l,t))},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12"},n.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},m=function(e){var t=e.relativePagePath,a=e.repository,l=(0,o.useStaticQuery)("1364590287").site.siteMetadata.repository,r=a||l,i=r.baseUrl,s=r.subDirectory,u=i+"/edit/"+r.branch+s+"/src/pages"+t;return i?n.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},n.createElement("div",{className:"bx--col"},n.createElement("a",{className:"EditLink-module--link--IDrl1",href:u},"Edit this page on GitHub"))):null},p=a(4703),c=a(1721),h=function(e){function t(){return e.apply(this,arguments)||this}return(0,c.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,l=e.slug,i=l.split("/").filter(Boolean).slice(-1)[0],s=a.map((function(e){var t,a=r()(e,{lower:!0,strict:!0}),s=a===i,u=new RegExp(i+"/?(#.*)?$"),g=l.replace(u,a);return n.createElement("li",{key:e,className:d()((t={},t["PageTabs-module--selected-item--aBB0K"]=s,t),"PageTabs-module--list-item--024o6")},n.createElement(o.Link,{className:"PageTabs-module--link--Kz-7R",to:""+g},e))}));return n.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},n.createElement("nav",{"aria-label":t},n.createElement("ul",{className:"PageTabs-module--list--xLqxG"},s))))))},t}(n.Component),b=h,k=a(7296),N=a(5387),f=a(3732),w=function(e){var t=e.date,a=new Date(t);return t?n.createElement(f.X2,{className:"last-modified-date-module--row--XJoYQ"},n.createElement(f.sg,null,n.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},y=function(e){var t=e.pageContext,a=e.children,l=e.location,u=e.Title,d=t.frontmatter,c=void 0===d?{}:d,h=t.relativePagePath,f=t.titleType,y=c.tabs,x=c.title,v=c.theme,E=c.description,P=c.keywords,T=c.date,C=(0,N.Z)().interiorTheme,D=(0,o.useStaticQuery)("2456312558").site.pathPrefix,A=D?l.pathname.replace(D,""):l.pathname,R=y?A.split("/").filter(Boolean).slice(-1)[0]||r()(y[0],{lower:!0}):"",B=v||C;return n.createElement(s.Z,{tabs:y,homepage:!1,theme:B,pageTitle:x,pageDescription:E,pageKeywords:P,titleType:f},n.createElement(g,{title:u?n.createElement(u,null):x,label:"label",tabs:y,theme:B}),y&&n.createElement(b,{title:x,slug:A,tabs:y,currentTab:R}),n.createElement(k.Z,{padded:!0},a,n.createElement(m,{relativePagePath:h}),n.createElement(w,{date:T})),n.createElement(p.Z,{pageContext:t,location:l,slug:A,tabs:y,currentTab:R}),n.createElement(i.Z,null))}},633:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return i},default:function(){return d}});var n=a(3366),l=(a(7294),a(4983)),r=a(3624),o=["components"],i={},s={_frontmatter:i},u=r.Z;function d(e){var t=e.components,a=(0,n.Z)(e,o);return(0,l.kt)(u,Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This API provides the aggregation capability which allows us to get aggregation results, for example, max, min, count with flexible filtering and grouping on Maximo data. The results also provide collection links which only return the records in that group."),(0,l.kt)("p",null,"The following table describes the query parameters for aggregation:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Query"),(0,l.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gbcols"),(0,l.kt)("td",{parentName:"tr",align:null},"Define the attributes and aggregation function"),(0,l.kt)("td",{parentName:"tr",align:null},"gbcols=siteid, min.budgetcost, max.budgetcost,avg.totalcost"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gbfilters"),(0,l.kt)("td",{parentName:"tr",align:null},"Provide the ability to filter the aggregation result to a smaller set"),(0,l.kt)("td",{parentName:"tr",align:null},"gbfilters=siteid=“BEDFORD”"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gbsortby"),(0,l.kt)("td",{parentName:"tr",align:null},"Provide the ability to sort the aggregation result"),(0,l.kt)("td",{parentName:"tr",align:null},"gbsortby=-siteid"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gbrelprop"),(0,l.kt)("td",{parentName:"tr",align:null},"Provide the ability to get the related property back"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gbrange"),(0,l.kt)("td",{parentName:"tr",align:null},"Provide the ability to get the ranged aggregation result (only support count)"),(0,l.kt)("td",{parentName:"tr",align:null},"gbrange=assethealth"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",null,"Aggregation Column"),(0,l.kt)("p",null,"The aggregation API is calculating results based on the selected ",(0,l.kt)("inlineCode",{parentName:"p"},"groupby")," attribute and aggregation function we define in ",(0,l.kt)("inlineCode",{parentName:"p"},"gbcols"),". For example, we are trying to get the minimum, maximum budget cost, the average total cost and the count number of the assets for all of the site.\nAt least one attribute must be provided as the grouping on attribute. In this example, it is siteid. "),(0,l.kt)("p",null,"The following table describes the syntax and examples:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Aggregation"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"max.attributename"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum value of the attribute"),(0,l.kt)("td",{parentName:"tr",align:null},"max.budgetcost")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"min.attributename"),(0,l.kt)("td",{parentName:"tr",align:null},"The minimum value of the attribute"),(0,l.kt)("td",{parentName:"tr",align:null},"min.budgetcost")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"avg.attributename"),(0,l.kt)("td",{parentName:"tr",align:null},"The average value of the attribute"),(0,l.kt)("td",{parentName:"tr",align:null},"avg.totalcost")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"count.attributename"),(0,l.kt)("td",{parentName:"tr",align:null},"The count number of record"),(0,l.kt)("td",{parentName:"tr",align:null},"count.*")))),(0,l.kt)("p",null,"Finally, ",(0,l.kt)("inlineCode",{parentName:"p"},"gbcols=siteid,max.budgetcost,min.budgetcost,avg.totalcost,count.*")),(0,l.kt)("p",null,"The aggregation results will be shown in the format of ",(0,l.kt)("inlineCode",{parentName:"p"},"<aggregation>_<attributename>"),". For example, if we have ",(0,l.kt)("inlineCode",{parentName:"p"},"max.attributename"),"in the request, the result will be shown as ",(0,l.kt)("inlineCode",{parentName:"p"},"max_attributename"),". The result also includes the data as well as a Resource Collection link, which gives you the resources in current group."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset?gbcols=siteid,count.*,min.budgetcost,max.budgetcost,avg.totalcost\n")),(0,l.kt)("p",null,"Expected result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "count": 75,\n  "max_budgetcost": 2765.00,\n  "collectionref": ".../oslc/os/mxapiasset?&oslc.where=siteid%3D%22BOSTON%22",\n  "avg_totalcost": 30901.17333333333333333333333,\n  "siteid": "BOSTON",\n  "min_budgetcost": 390.00\n}\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"gbcols")," also support multiple level aggregation. You can build the following parameters to get the aggregation results for ",(0,l.kt)("inlineCode",{parentName:"p"},"organization")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"site"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset?gbcols=orgid,siteid,count.*,min.budgetcost,max.budgetcost,a vg.totalcost\n")),(0,l.kt)("p",null,"Expected result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "count": 551,\n  "orgid": "EAGLENA",\n  "max_budgetcost": 25000.00,\n  "collectionref": collectionref,\n  "avg_totalcost": 436.87392014519056261343012,\n  "siteid": "BEDFORD",\n  "min_budgetcost": 0.00\n}\n')),(0,l.kt)("h2",null,"Aggregation Filter"),(0,l.kt)("p",null,"Aggregation filter (gbfilter) is used to further filter the results. For example, we would to get the result for smaller set of records instead of full table. That’s the time we can leverage ",(0,l.kt)("inlineCode",{parentName:"p"},"gbfilter"),", which is equivalent to ",(0,l.kt)("inlineCode",{parentName:"p"},"having")," clause in ",(0,l.kt)("inlineCode",{parentName:"p"},"SQL")," term. The value for this query parameter must follow the SQL clause format. "),(0,l.kt)("p",null,"For example, you want to get the grouped result only for ",(0,l.kt)("inlineCode",{parentName:"p"},"BEDFORD"),". Then there is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset?gbcols=siteid,count.*&gbfilter=siteid='BEDFORD'\n")),(0,l.kt)("p",null,"Expected result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "count": 551,\n  "sum_totalcost": 240717.53,\n  "collectionref": ".../oslc/os/mxapiasset?&oslc.where=siteid%3D%22BEDFORD%22",\n  "siteid": "BEDFORD"\n}\n')),(0,l.kt)("h2",null,"Aggregation Sort By"),(0,l.kt)("p",null,"To sort the aggregated result by certain attribute, we can leverage ",(0,l.kt)("inlineCode",{parentName:"p"},"gbsortby")," with the available aggregated columns. It support both ascending and descending order."),(0,l.kt)("p",null,"For example, you want to sort the result set by Site in descending order."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset?gbcols=siteid,count.*&gbsortby=-siteid\n")),(0,l.kt)("p",null,"For ascending order, the item should be ",(0,l.kt)("inlineCode",{parentName:"p"},"gbsortby=+siteid"),". However, when tested in the browser, it is necessary to encode the value for ",(0,l.kt)("inlineCode",{parentName:"p"},"gbsortby"),". There is online sites to help you to do it. Copy the value ",(0,l.kt)("inlineCode",{parentName:"p"},"+siteid")," from URL and encode it. Bring it and copy to URL. Finally, you can get ",(0,l.kt)("inlineCode",{parentName:"p"},"gbsortby=%2Bsiteid")," to show the results by Site in ascending order."),(0,l.kt)("p",null,"Example of ascending order:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset?gbcols=siteid,count.*&gbsortby=%2Bsiteid\n")),(0,l.kt)("h2",null,"Aggregation Range"),(0,l.kt)("p",null,"Sometimes we need to further group the aggregation results together according to certain range. In Maximo, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"gbrange")," to get this task done. The format is different due to the data type."),(0,l.kt)("h3",null,"String(ALN) value"),(0,l.kt)("p",null,"For example, we are trying to get the total count for work orders which is in WAPPR or APPR status. The gbrange syntax will be like ",(0,l.kt)("inlineCode",{parentName:"p"},"gbrange=status={[APPR:WAPPR]}")),(0,l.kt)("p",null,"In result set, the result for APPR or WAPPR will be added to a new group with a different total count and collection link. All the other result, like ",(0,l.kt)("inlineCode",{parentName:"p"},'status="CAN"')," will be shown as the normal result."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /maximo/oslc/os/mxwodetail?gbcols=status,count.*&gbrange=status={[APPR:WAPPR]}\n")),(0,l.kt)("p",null,"Expected result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "count": 2388,\n  "status": [\n    "APPR",\n    "WAPPR"\n  ],\n  "collectionref": ".../oslc/os/mxwodetail?oslc.where=status+in+%5B%22APPR%22%2C%22WAPPR %22%5D"\n}\n')),(0,l.kt)("h3",null,"Numeric value"),(0,l.kt)("p",null,"The numeric value range is defined in a different way. For example, assume we need to get the count for workorder per wopriority and group them together for cerntain ranges. Let’s say the first range is 1<=worpriority<=3 and the second range is 4<=wopriority<7."),(0,l.kt)("p",null,"The rules to build the range is following the mathematics. ”","[” and ”]","” means greater or less than including the side value. ”(” and ”)” means greater or less than exclude the side value. "),(0,l.kt)("p",null,"In our case, we will have, ",(0,l.kt)("inlineCode",{parentName:"p"},"gbrange=wopriorty={[1..3],[4..7)}")),(0,l.kt)("p",null,"We will see the priority=7 group has been excluded from the ranged result."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /oslc/os/mxwodetail?gbcols=wopriority,count.*&gbrange=wopriority={[1..3],[4..7)}\n")),(0,l.kt)("p",null,"Expected result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "count": 32,\n  "collectionref": ".../oslc/os/mxwodetail?&oslc.where=wopriority%3D7",\n  "wopriority": 7\n},\n{\n  "count": 390,\n  "collectionref": ".../oslc/os/mxwodetail?&oslc.where=wopriority%3E%3D4+and+wopriority% 3C7",\n  "wopriority": [\n    4.0,\n    7.0\n  ]\n},\n{\n  "count": 66415,\n  "collectionref": ".../oslc/os/mxwodetail?&oslc.where=wopriority%3E%3D1+and+wopriority% 3C%3D3",\n  "wopriority": [\n    1.0,\n    3.0\n  ]\n}\n')))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-groupby-groupby-mdx-044b519ddaf6a3a703cf.js.map
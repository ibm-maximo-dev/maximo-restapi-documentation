"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[2332],{3624:function(e,t,a){a.d(t,{Z:function(){return y}});var n=a(7294),l=a(8650),o=a.n(l),r=a(1597),s=a(811),i=a(87),c=a(5900),g=a.n(c),d=function(e){var t,a=e.title,l=e.theme,o=e.tabs,r=void 0===o?[]:o;return n.createElement("div",{className:g()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=r.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===l,t))},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12"},n.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},m=function(e){var t=e.relativePagePath,a=e.repository,l=(0,r.useStaticQuery)("1364590287").site.siteMetadata.repository,o=a||l,s=o.baseUrl,i=o.subDirectory,c=s+"/edit/"+o.branch+i+"/src/pages"+t;return s?n.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},n.createElement("div",{className:"bx--col"},n.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},u=a(4703),h=a(1721),p=function(e){function t(){return e.apply(this,arguments)||this}return(0,h.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,l=e.slug,s=l.split("/").filter(Boolean).slice(-1)[0],i=a.map((function(e){var t,a=o()(e,{lower:!0,strict:!0}),i=a===s,c=new RegExp(s+"/?(#.*)?$"),d=l.replace(c,a);return n.createElement("li",{key:e,className:g()((t={},t["PageTabs-module--selected-item--aBB0K"]=i,t),"PageTabs-module--list-item--024o6")},n.createElement(r.Link,{className:"PageTabs-module--link--Kz-7R",to:""+d},e))}));return n.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},n.createElement("nav",{"aria-label":t},n.createElement("ul",{className:"PageTabs-module--list--xLqxG"},i))))))},t}(n.Component),b=p,f=a(7296),k=a(5387),E=a(3732),w=function(e){var t=e.date,a=new Date(t);return t?n.createElement(E.X2,{className:"last-modified-date-module--row--XJoYQ"},n.createElement(E.sg,null,n.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},y=function(e){var t=e.pageContext,a=e.children,l=e.location,c=e.Title,g=t.frontmatter,h=void 0===g?{}:g,p=t.relativePagePath,E=t.titleType,y=h.tabs,T=h.title,v=h.theme,N=h.description,P=h.keywords,x=h.date,C=(0,k.Z)().interiorTheme,S=(0,r.useStaticQuery)("2456312558").site.pathPrefix,I=S?l.pathname.replace(S,""):l.pathname,A=y?I.split("/").filter(Boolean).slice(-1)[0]||o()(y[0],{lower:!0}):"",L=v||C;return n.createElement(i.Z,{tabs:y,homepage:!1,theme:L,pageTitle:T,pageDescription:N,pageKeywords:P,titleType:E},n.createElement(d,{title:c?n.createElement(c,null):T,label:"label",tabs:y,theme:L}),y&&n.createElement(b,{title:T,slug:I,tabs:y,currentTab:A}),n.createElement(f.Z,{padded:!0},a,n.createElement(m,{relativePagePath:p}),n.createElement(w,{date:x})),n.createElement(u.Z,{pageContext:t,location:l,slug:I,tabs:y,currentTab:A}),n.createElement(s.Z,null))}},7151:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return s},default:function(){return g}});var n=a(3366),l=(a(7294),a(4983)),o=a(3624),r=["components"],s={},i={_frontmatter:s},c=o.Z;function g(e){var t=e.components,a=(0,n.Z)(e,r);return(0,l.kt)(c,Object.assign({},i,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The REST API uses primarily the ",(0,l.kt)("inlineCode",{parentName:"p"},"integration")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"oslc")," loggers for the API framework part. Enabling those two loggers to ",(0,l.kt)("inlineCode",{parentName:"p"},"DEBUG")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"INFO")," provides debugging information. However, the rest APIs always interface with Maximo business objects and other Maximo artifacts, such as security, scripting etc, which have their own loggers. Additionally, you can enable the SQL loggers if the query result is not what the filter clause described."),(0,l.kt)("p",null,"One option to debug is to use the thread logging functionality, which is integrated with the REST API framework."),(0,l.kt)("p",null,"Thread logging is enabled on a per user basis within the REST API scope in the Logging application by selecting ",(0,l.kt)("strong",{parentName:"p"},"Configure Custom logging")," > ",(0,l.kt)("strong",{parentName:"p"},"Thread logging"),". Choose the context name as “OSLC” and the user name as the “personid” of the user whose REST requests you want to track or debug. Then you can enable the logging with - sql,oslc and integration loggers to start with."),(0,l.kt)("p",null,"You can also enabling the thread logging by using the following REST API:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /oslc/log/enablelogs\n")),(0,l.kt)("p",null,"Body:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  "log4j.logger.maximo.sql",\n  "log4j.logger.maximo.oslc",\n  "log4j.logger.m aximo.integration"\n]\n')),(0,l.kt)("p",null,"This API enables the thread logging for the current user that is logged in for the loggers ",(0,l.kt)("inlineCode",{parentName:"p"},"sql,oslc")," and integration. There is another api /oslc/log/enablealllogs that enables all loggers for the user. It is recommended not to set that one right away as it would generate a multiple logs, making is difficult to debug. You can disable this logging by using the following call:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST  /oslc/log/disablealllogs\n<no request body needed>\n")),(0,l.kt)("p",null,"As you make the requests with this setup for the desired user, the system keeps track of all the oslc, integration and SQL logs that are generated for that user only. It will not mix the logs with other users or other contexts (other than OSLC) that may also generate logs."),(0,l.kt)("p",null,"This log can then be accessed by using the REST API call ",(0,l.kt)("inlineCode",{parentName:"p"},"GET /oslc/log"),". This API call streams the log to the browser. This log is only for the user who was targeted with thread logging setup and can be accessed by only that user and only for that logged in user session. Once the session is done, this log can still be accessed by the server admin from the server’s working directory, which is a manual process. There is no REST API for that task."))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-troubleshooting-mdx-4a8a8af84406d3cc0018.js.map
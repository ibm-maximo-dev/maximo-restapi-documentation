"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[9515],{3624:function(e,t,a){a.d(t,{Z:function(){return E}});var n=a(7294),l=a(8650),r=a.n(l),o=a(1597),s=a(811),i=a(87),c=a(5900),u=a.n(c),m=function(e){var t,a=e.title,l=e.theme,r=e.tabs,o=void 0===r?[]:r;return n.createElement("div",{className:u()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=o.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===l,t))},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12"},n.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},d=function(e){var t=e.relativePagePath,a=e.repository,l=(0,o.useStaticQuery)("1364590287").site.siteMetadata.repository,r=a||l,s=r.baseUrl,i=r.subDirectory,c=s+"/edit/"+r.branch+i+"/src/pages"+t;return s?n.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},n.createElement("div",{className:"bx--col"},n.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},p=a(4703),h=a(1721),g=function(e){function t(){return e.apply(this,arguments)||this}return(0,h.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,l=e.slug,s=l.split("/").filter(Boolean).slice(-1)[0],i=a.map((function(e){var t,a=r()(e,{lower:!0,strict:!0}),i=a===s,c=new RegExp(s+"/?(#.*)?$"),m=l.replace(c,a);return n.createElement("li",{key:e,className:u()((t={},t["PageTabs-module--selected-item--aBB0K"]=i,t),"PageTabs-module--list-item--024o6")},n.createElement(o.Link,{className:"PageTabs-module--link--Kz-7R",to:""+m},e))}));return n.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},n.createElement("nav",{"aria-label":t},n.createElement("ul",{className:"PageTabs-module--list--xLqxG"},i))))))},t}(n.Component),b=g,v=a(7296),k=a(5387),w=a(3732),f=function(e){var t=e.date,a=new Date(t);return t?n.createElement(w.X2,{className:"last-modified-date-module--row--XJoYQ"},n.createElement(w.sg,null,n.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},E=function(e){var t=e.pageContext,a=e.children,l=e.location,c=e.Title,u=t.frontmatter,h=void 0===u?{}:u,g=t.relativePagePath,w=t.titleType,E=h.tabs,y=h.title,N=h.theme,x=h.description,T=h.keywords,P=h.date,C=(0,k.Z)().interiorTheme,q=(0,o.useStaticQuery)("2456312558").site.pathPrefix,L=q?l.pathname.replace(q,""):l.pathname,Z=E?L.split("/").filter(Boolean).slice(-1)[0]||r()(E[0],{lower:!0}):"",S=N||C;return n.createElement(i.Z,{tabs:E,homepage:!1,theme:S,pageTitle:y,pageDescription:x,pageKeywords:T,titleType:w},n.createElement(m,{title:c?n.createElement(c,null):y,label:"label",tabs:E,theme:S}),E&&n.createElement(b,{title:y,slug:L,tabs:E,currentTab:Z}),n.createElement(v.Z,{padded:!0},a,n.createElement(d,{relativePagePath:g}),n.createElement(f,{date:P})),n.createElement(p.Z,{pageContext:t,location:l,slug:L,tabs:E,currentTab:Z}),n.createElement(s.Z,null))}},8023:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return s},default:function(){return u}});var n=a(3366),l=(a(7294),a(4983)),r=a(3624),o=["components"],s={},i={_frontmatter:s},c=r.Z;function u(e){var t=e.components,a=(0,n.Z)(e,o);return(0,l.kt)(c,Object.assign({},i,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Maximo business logic is filled with Yes/No/Cancell/OK interactions that needs specific user inputs to execute the corresponding business logic. For this logic to be accessible from REST apis, we need to make the rest api request interactive. By default all rest requests are non interactive. This will make the server side logic choose the default option and execute the default logic. This may not be desirable in all cases. To keep the choice at the users hand we have introduced the concept of interactive requests in this api. The example below shows how to make that request:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /oslc/os/mxapiwodetail?interactive=1\n")),(0,l.kt)("p",null,"This will mark that request as interactive and hence now execute the interactive logic on the server side. However you need to somehow set the desired user input for the interactive logic. To do that we need to set the request header yncuserinput."),(0,l.kt)("p",null,"The value can be a ; separated list of name value pairs - each name will correspond to the YesNo key - for example in the FldWoAssetnum class one of the interactions is shown below"),(0,l.kt)("p",null,"Say u were dealing with this one: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'MXApplicationYesNoCancelException.getUserInput("woassetchange",...\n')),(0,l.kt)("p",null,"your request header would look like ",(0,l.kt)("inlineCode",{parentName:"p"},"yncuserinput: woassetchange:<value>")," where the value is one of"),(0,l.kt)("p",null,"OK = 2\nCANCEL = 4\nYES = 8\nNO = 16\nNULL = -1"),(0,l.kt)("p",null,"An example shown below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"yncuserinput:woassetchange:8\n")),(0,l.kt)("p",null,"Now say you had YNC nested - like one YNC leads to the other - you can solve all of them by providing the values in sequence - like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"yncuserinput: woassetchange:8;<someotherkey>:<someothervalue>\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-other-interactivelogic-mdx-c59e091fc2087858599c.js.map
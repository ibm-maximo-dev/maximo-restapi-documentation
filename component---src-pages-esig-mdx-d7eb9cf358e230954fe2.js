"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[2546],{3624:function(e,t,a){a.d(t,{Z:function(){return k}});var n=a(7294),i=a(8650),r=a.n(i),l=a(1597),o=a(811),s=a(87),c=a(5900),d=a.n(c),h=function(e){var t,a=e.title,i=e.theme,r=e.tabs,l=void 0===r?[]:r;return n.createElement("div",{className:d()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=l.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===i,t))},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12"},n.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},m=function(e){var t=e.relativePagePath,a=e.repository,i=(0,l.useStaticQuery)("1364590287").site.siteMetadata.repository,r=a||i,o=r.baseUrl,s=r.subDirectory,c=o+"/edit/"+r.branch+s+"/src/pages"+t;return o?n.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},n.createElement("div",{className:"bx--col"},n.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},u=a(4703),g=a(1721),p=function(e){function t(){return e.apply(this,arguments)||this}return(0,g.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,i=e.slug,o=i.split("/").filter(Boolean).slice(-1)[0],s=a.map((function(e){var t,a=r()(e,{lower:!0,strict:!0}),s=a===o,c=new RegExp(o+"/?(#.*)?$"),h=i.replace(c,a);return n.createElement("li",{key:e,className:d()((t={},t["PageTabs-module--selected-item--aBB0K"]=s,t),"PageTabs-module--list-item--024o6")},n.createElement(l.Link,{className:"PageTabs-module--link--Kz-7R",to:""+h},e))}));return n.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},n.createElement("nav",{"aria-label":t},n.createElement("ul",{className:"PageTabs-module--list--xLqxG"},s))))))},t}(n.Component),b=p,E=a(7296),f=a(5387),v=a(3732),w=function(e){var t=e.date,a=new Date(t);return t?n.createElement(v.X2,{className:"last-modified-date-module--row--XJoYQ"},n.createElement(v.sg,null,n.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},k=function(e){var t=e.pageContext,a=e.children,i=e.location,c=e.Title,d=t.frontmatter,g=void 0===d?{}:d,p=t.relativePagePath,v=t.titleType,k=g.tabs,y=g.title,T=g.theme,N=g.description,x=g.keywords,S=g.date,P=(0,f.Z)().interiorTheme,C=(0,l.useStaticQuery)("2456312558").site.pathPrefix,q=C?i.pathname.replace(C,""):i.pathname,M=k?q.split("/").filter(Boolean).slice(-1)[0]||r()(k[0],{lower:!0}):"",Z=T||P;return n.createElement(s.Z,{tabs:k,homepage:!1,theme:Z,pageTitle:y,pageDescription:N,pageKeywords:x,titleType:v},n.createElement(h,{title:c?n.createElement(c,null):y,label:"label",tabs:k,theme:Z}),k&&n.createElement(b,{title:y,slug:q,tabs:k,currentTab:M}),n.createElement(E.Z,{padded:!0},a,n.createElement(m,{relativePagePath:p}),n.createElement(w,{date:S})),n.createElement(u.Z,{pageContext:t,location:i,slug:q,tabs:k,currentTab:M}),n.createElement(o.Z,null))}},1611:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return o},default:function(){return d}});var n=a(3366),i=(a(7294),a(4983)),r=a(3624),l=["components"],o={},s={_frontmatter:o},c=r.Z;function d(e){var t=e.components,a=(0,n.Z)(e,l);return(0,i.kt)(c,Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Starting 7612, Maximo E-Signatures have been enhanced to support E-Signature keys which are Maximo managed E-Signature verifcations without needing to delegate the verification to the underlying authentication scheme. This was done keeping in mind the existing issues of doing E-Signature verifications when we have federated authentocation schemes (like SAML/OIDC) in play. However this is not the place to discuss that new E-Signature enhancement. We are going to discuss how the REST apis can deal with E-Signature metadata as well as handle the E-Signature verifications."),(0,i.kt)("h3",null,"E-Signature metadata"),(0,i.kt)("p",null,"The first thing a REST client code would like to know is if any E-Signtaure enabled attribute been modified. To do that, the REST request needs to have an added query parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"&checkesig=1"),". Once that is set (as part of the POST request), the server would respond back with a Maximo error with the BMX code BMXAA9766E. This will be an indicator to the client code to show the esig challenge to the end user. Note that by default the REST framework will not track esig enabled attribute modifications - it will only do so when that ",(0,i.kt)("inlineCode",{parentName:"p"},"&checkesig=1")," query paremeter is set."),(0,i.kt)("h3",null,"Respoding to the E-Signature challenge"),(0,i.kt)("p",null,"To respond to the esig challenge, the rest api provides an ",(0,i.kt)("inlineCode",{parentName:"p"},"esigauth")," request header to set the base64 encoded esig password (or esig key if native esig is turned on). Along with that there is another request header ",(0,i.kt)("inlineCode",{parentName:"p"},"esigreason")," which can be leveraged to provide the reason (memo) for the change. The clent should re-submit the change along with these request headers. Once the server verifies the esigauth, it will let the transaction go through the save process. "))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-esig-mdx-d7eb9cf358e230954fe2.js.map
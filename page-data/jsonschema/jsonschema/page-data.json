{"componentChunkName":"component---src-pages-jsonschema-jsonschema-mdx","path":"/jsonschema/jsonschema/","result":{"pageContext":{"frontmatter":{"title":"JSON Schema"},"relativePagePath":"/jsonschema/jsonschema.mdx","titleType":"append","MdxNode":{"id":"2b06ee13-5345-5276-b215-5d3c0f24aaab","children":[],"parent":"2793c340-4dc9-51d1-acf0-ae987ff7abb4","internal":{"content":"--- \ntitle: JSON Schema\n---\n\nThe rest apis describe the resource using json schema standards. Maximo metadata contains more information than json schema supports. Hence we extend that schema specification with Maximo specific properties that contains more information from the Maximo metadata.\nSchema's can be accessed in couple of ways using the rest api. We have a \"jsonschemas\" route that provides schema to any Object Structure. An example below shows that:\n \n```\nGET /oslc/jsonschemas/mxapiwodetail\n```\n\nThis will return the json schema for the root object of the Object structure and will also contain links to the child objects like INVRESERVE etc. To get the schema for all the objects in the OS we need to include the request parameter `oslc.select=*`. This will fetch all the child objects inline into the root object schema while retaining the hierarchy structure.\n\nNote also that the properties in the schema map to the Mbo attributes (which are included as part of the OS). They also have the json schema type as well as the \"ubtype\" that has the more specific Maximo type.\n\nAdditionally you can also specify the oslc.select clause to filter out the part of the Object structure you need. An example is shown below:\n\n```\nGET /oslc/jsonschemas/mxapiwodetail?oslc.select=wonum,status,invreserve{*}\n```\n\nIt will give you the details about the workorder wonum and status attributes and all attributes from the invreserve child object.\n\nThere is another popular way to get the schema while you are fetching details in a collection query. The query below is a simple collection query\n\n```\nGET /oslc/os/mxwodetail?oslc.select=wonum,status,description,invreserve{itemnum},asset.assetnum,asset.status\n```\n\nNow say in addition to fetching the workorder records, I wanted the schema for this oslc.select clause that is fetching part details from workorder (wonum etc), part from invreserve and part from asset (which is not even part of the OS) using the dot notation. To do that all we need to do is to add the query parameter addschema=1 to the request url. By doing that the response json objects \"responseInfo\" property will have the schema inlined inside it. This is like getting the data as well as the metadata al in the same rest api call. Note that this schema will not be fetched for the next page request as the next page url will not have the addschema=1 in the uri. However if you add that query parameter explicitly, it will fetch the schema for any page.\n\nWe added the support for mbo schemas too. This is critical for use cases where we fetch a related mboset using the rest api without using the responseos query parameter. For example say we wanted to evaluate the getList api for an attribute - say status for a given workorder. The api below will do the job\n\n```\nGET /oslc/os/mxapiwodetail/{id}/getlist~status?oslc.select=*\n```\n\nThis will return the possible list of status values for that workorder state. Now the response is a serialized version of the synonymdomain Mbo and is not an Object Structure. If we wanted to have a schema for the response, we can add the query parameter &addschema=1 and that will work for the response mboset without needing to set it as an Object Structure.\n\n```\nGET /oslc/os/mxapiwodetail/{id}/getlist~status?oslc.select=*&addschema=1\n```\n\nThis Mbo schema can also be accessed standalone using the route jsonmboschemas. A sample call is shown below:\n\n```\nGET /oslc/jsonmboschemas/asset?oslc.select=assetnum,status,location.description,location.status,rel.openwo{wonum,status}\n```\n\nThis will return the json schema for asset Mbo with the attributes assetnum and status along with the related attributes from location and workorder (using the rel.openwo).\n\nWhen we access some relation as a Mbo(Set), we can apply json schemas there too without needing to use an Object structure for this. A sample below will show the use case\n\n```\nGET /oslc/os/mxapipo/{rest id}/vendor?addschema=1&oslc.select=*\n```\n\nHere we are accessing the related vendor for the PO and we are not using any responseos query param to render the response to as an OS and yet we can access the schema of the \"vendor\" (which is the companies mbo).\n","type":"Mdx","contentDigest":"f49b80eac5420af646703c5b09307b7d","owner":"gatsby-plugin-mdx","counter":139},"frontmatter":{"title":"JSON Schema"},"exports":{},"rawBody":"--- \ntitle: JSON Schema\n---\n\nThe rest apis describe the resource using json schema standards. Maximo metadata contains more information than json schema supports. Hence we extend that schema specification with Maximo specific properties that contains more information from the Maximo metadata.\nSchema's can be accessed in couple of ways using the rest api. We have a \"jsonschemas\" route that provides schema to any Object Structure. An example below shows that:\n \n```\nGET /oslc/jsonschemas/mxapiwodetail\n```\n\nThis will return the json schema for the root object of the Object structure and will also contain links to the child objects like INVRESERVE etc. To get the schema for all the objects in the OS we need to include the request parameter `oslc.select=*`. This will fetch all the child objects inline into the root object schema while retaining the hierarchy structure.\n\nNote also that the properties in the schema map to the Mbo attributes (which are included as part of the OS). They also have the json schema type as well as the \"ubtype\" that has the more specific Maximo type.\n\nAdditionally you can also specify the oslc.select clause to filter out the part of the Object structure you need. An example is shown below:\n\n```\nGET /oslc/jsonschemas/mxapiwodetail?oslc.select=wonum,status,invreserve{*}\n```\n\nIt will give you the details about the workorder wonum and status attributes and all attributes from the invreserve child object.\n\nThere is another popular way to get the schema while you are fetching details in a collection query. The query below is a simple collection query\n\n```\nGET /oslc/os/mxwodetail?oslc.select=wonum,status,description,invreserve{itemnum},asset.assetnum,asset.status\n```\n\nNow say in addition to fetching the workorder records, I wanted the schema for this oslc.select clause that is fetching part details from workorder (wonum etc), part from invreserve and part from asset (which is not even part of the OS) using the dot notation. To do that all we need to do is to add the query parameter addschema=1 to the request url. By doing that the response json objects \"responseInfo\" property will have the schema inlined inside it. This is like getting the data as well as the metadata al in the same rest api call. Note that this schema will not be fetched for the next page request as the next page url will not have the addschema=1 in the uri. However if you add that query parameter explicitly, it will fetch the schema for any page.\n\nWe added the support for mbo schemas too. This is critical for use cases where we fetch a related mboset using the rest api without using the responseos query parameter. For example say we wanted to evaluate the getList api for an attribute - say status for a given workorder. The api below will do the job\n\n```\nGET /oslc/os/mxapiwodetail/{id}/getlist~status?oslc.select=*\n```\n\nThis will return the possible list of status values for that workorder state. Now the response is a serialized version of the synonymdomain Mbo and is not an Object Structure. If we wanted to have a schema for the response, we can add the query parameter &addschema=1 and that will work for the response mboset without needing to set it as an Object Structure.\n\n```\nGET /oslc/os/mxapiwodetail/{id}/getlist~status?oslc.select=*&addschema=1\n```\n\nThis Mbo schema can also be accessed standalone using the route jsonmboschemas. A sample call is shown below:\n\n```\nGET /oslc/jsonmboschemas/asset?oslc.select=assetnum,status,location.description,location.status,rel.openwo{wonum,status}\n```\n\nThis will return the json schema for asset Mbo with the attributes assetnum and status along with the related attributes from location and workorder (using the rel.openwo).\n\nWhen we access some relation as a Mbo(Set), we can apply json schemas there too without needing to use an Object structure for this. A sample below will show the use case\n\n```\nGET /oslc/os/mxapipo/{rest id}/vendor?addschema=1&oslc.select=*\n```\n\nHere we are accessing the related vendor for the PO and we are not using any responseos query param to render the response to as an OS and yet we can access the schema of the \"vendor\" (which is the companies mbo).\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/jsonschema/jsonschema.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
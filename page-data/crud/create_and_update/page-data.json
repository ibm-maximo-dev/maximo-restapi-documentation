{"componentChunkName":"component---src-pages-crud-create-and-update-mdx","path":"/crud/create_and_update/","result":{"pageContext":{"frontmatter":{"title":"Create and update resources"},"relativePagePath":"/crud/create_and_update.mdx","titleType":"append","MdxNode":{"id":"2786a0c9-bc14-5650-9375-a02d7db79678","children":[],"parent":"c1f8b7ff-90d2-5fa1-83a1-3ad066301d58","internal":{"content":"---\ntitle: Create and update resources\n---\n\n## Create resources\n\nCreating resources are typically completed by using the collection URI, which is the same URI you use to query the resources. For example, the API call for creating assets is shown in the following example:\n\n```\nPOST /oslc/os/mxapiasset\n```\n\nPost body:\n\n```json\n{\n  \"assetnum\": \"ASSET1\",\n  \"siteid\": \"BEDFORD\",\n  \"description\": \"my first asset\"\n}\n```\n\nAfter you create the asset, you get a response that contains a `location` header with the URI of the new asset. You can now use that `location` URI to fetch the new resource. Rather than doing a `GET` to fetch the resource, you may want the response of the create to contain the new resource. For that, you can add the request header `properties`. The `properties` header follows the syntax of the [oslc.select](../query/selecting) clause. You can use that to fetch all properties, partial set of properties, related MBO attributes, formula properties etc (everything that you can do with the select clause).\n\n```\nPOST /oslc/os/mxapiasset \nproperties: *\n\n{\n  \"assetnum\": \"ASSET1\",\n  \"siteid\": \"BEDFORD\",\n  \"description\": \"my first asset\"\n}\n```\n\nOr\n\n```\nPOST /oslc/os/mxapiasset \nproperties: assetnum,status\n\n{\n  \"assetnum\": \"ASSET1\",\n  \"siteid\": \"BEDFORD\",\n  \"description\": \"my first asset\"\n}\n```\n\nUsing the `properties` header removes the need to do an extra `GET` for every create and update.\n\n## Updating resources\n\nNow that an asset is created, you can update the asset. The following example shows how you can set a `location` and a `description` to the `asset`.\n\n```\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\nproperties:*\n\n{\n  \"location\": \"BR300\",\n  \"description\": \"test asset desc\"\n}\n```\n\nThe URL has a `rest id` at the end of the collection URL. This URI is pointing to a member asset in the collection, which is why the `rest id` token is after the collection URI. \n\n<InlineNotification kind=\"info\">\nThe rest id is not the unique id for the Mbo. It's a generated id for the Mbo that is created using the primary-key attribute values. \n</InlineNotification>\n\n<InlineNotification kind=\"info\">\nx-method-override:PATCH instructs the server side to update the resource. As with create, you can specify the properties request header, to get back the results of an update. The sample here shows a value of *. We would generally recommend avoiding use of * (unless you really want all properties) and instead use the selected set of properties that you care about (works our better for performance).\n</InlineNotification>\n\nNote that we needed to fetch the URI of the `mxasset` resource in order to update it. The fetching of that URI can be done in two ways:\n\n* We can get the URI as part of a GET collection query, which returns all select members with their URIs.\n* As part of the response `location` header when we create a resource.\n\nAlthough this is the prevalent design for URI interaction in REST paradigm, in some cases you may not have the URI and still need to update the asset based on other key information.\n\n## Add child objects\n\nTo add some child objects, the following API example adds two `assetmeters` to the new asset.\n\n```\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE \nproperties:*\n```\n\nPost body:\n\n```json\n{\n  \"description\": \"test asset desc\",\n  \"assetmeter\": [\n    {\n      \"metername\": \"TEMP-F\",\n      \"linearassetid\": 0\n    },\n    {\n      \"metername\": \"ABC\",\n      \"linearassetid\": 0\n    }\n  ]\n}\n```\n\nAn extra request header called `patchtype` is used with a value of `MERGE`. This instructs the server to match the child objects - like `assetmeter` with the existing`assetmters` for this asset. If a match is found, that `assetmeter` gets updates with the request assetmeter. If a match is not found, an `assetmeter` is created. This action is called the `MERGE` API. For example, if the asset to be updated has three existing `assetmeters`, and the request contained one existing\n`assetmeter` and one new `assetmeter`, that asset will be having  4  `assetmeters`  with one newly created one and another updated `assetmeter` after the merge call.\n\nTo highlight the difference between a `PATCH` and `MERGE` call, you can run the same request without the `patchtype` header on another similar asset with  three ` assetmeters`. The server side creates a new `assetmeter` and update the existing `assetmeter` like the `MERGE` call. Unlike the `MERGE` call, the `assetmeters` that were not in the request are deleted. In this example, only two ` assetmeters` (that are in the request) remains in the asset. Thus in a `PATCH` request, the server side deletes all child objects that are not in the request payload.\n\n## Updating child objects\n\nTo update the child objects, the following example updates the `assetmeter` object to set the meter reading. Make sure that the `np` attributes, `newreading` and `newreadingdate` are included in the `MXAPIASSET` object structure.\n\n```\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE \nproperties:*\n```\n\nPost body:\n\n```json\n{\n  \"description\": \"test asset desc - updating temp meter\",\n  \"assetmeter\": [\n    {\n      \"metername\": \"TEMP-F\",\n      \"linearassetid\": 0,\n      \"newreading\": \"10\"\n    }\n  ]\n}\n```\n\nNotice that the primary keys of the `assetmeter` - `metername` and `linearassetid` for the meter update are included. Another option that the API allows is to use the href URI for the `assetmeter` instead of the primary keys, which is shown in the following example:\n\n```http\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE \nproperties:*\n\n{\n  \"description\": \"test asset desc - updating temp meter with child uri\",\n  \"assetmeter\": [\n    {\n      \"href\": \"parent uri#encoded_child_keys_anchored\",\n      \"newreading\": \"10\"\n    }\n  ]\n}\n```\n\n## Delete child objects\n\nThe following request below shows how to selectively delete a child object:\n\n```\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE\nproperties:*\n\n{\n  \"assetmeter\": [\n    {\n      \"metername\": \"TEMP-F\",\n      \"linearassetid\": 0,\n      \"_action\": \"Delete\"\n    }\n  ]\n}\n```\n\nNote the use of child level actions (`_action`) to delete the `assetmeter`. You could have also used the child href instead of the primary keys as shown before. You could have also used the http `DELETE` method to delete the child object using the child object `localuri` URI.\n\n```\nDELETE <assetmeter localuri>\n```\n\nNote the local URI for a child object (in Object structure) is something you can use to refer directly to the child object. You cannot do the same with the child href as that is an anchored URI. For example, you cannot use the child href for http `DELETE`.\n\nBy using the POST method with the `_action` child action, you can do a bulk delete of child objects, which you cannot do using the http `DELETE` method.","type":"Mdx","contentDigest":"ec8081209e4f06a11da8cf5cae0a4bb7","owner":"gatsby-plugin-mdx","counter":158},"frontmatter":{"title":"Create and update resources"},"exports":{},"rawBody":"---\ntitle: Create and update resources\n---\n\n## Create resources\n\nCreating resources are typically completed by using the collection URI, which is the same URI you use to query the resources. For example, the API call for creating assets is shown in the following example:\n\n```\nPOST /oslc/os/mxapiasset\n```\n\nPost body:\n\n```json\n{\n  \"assetnum\": \"ASSET1\",\n  \"siteid\": \"BEDFORD\",\n  \"description\": \"my first asset\"\n}\n```\n\nAfter you create the asset, you get a response that contains a `location` header with the URI of the new asset. You can now use that `location` URI to fetch the new resource. Rather than doing a `GET` to fetch the resource, you may want the response of the create to contain the new resource. For that, you can add the request header `properties`. The `properties` header follows the syntax of the [oslc.select](../query/selecting) clause. You can use that to fetch all properties, partial set of properties, related MBO attributes, formula properties etc (everything that you can do with the select clause).\n\n```\nPOST /oslc/os/mxapiasset \nproperties: *\n\n{\n  \"assetnum\": \"ASSET1\",\n  \"siteid\": \"BEDFORD\",\n  \"description\": \"my first asset\"\n}\n```\n\nOr\n\n```\nPOST /oslc/os/mxapiasset \nproperties: assetnum,status\n\n{\n  \"assetnum\": \"ASSET1\",\n  \"siteid\": \"BEDFORD\",\n  \"description\": \"my first asset\"\n}\n```\n\nUsing the `properties` header removes the need to do an extra `GET` for every create and update.\n\n## Updating resources\n\nNow that an asset is created, you can update the asset. The following example shows how you can set a `location` and a `description` to the `asset`.\n\n```\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\nproperties:*\n\n{\n  \"location\": \"BR300\",\n  \"description\": \"test asset desc\"\n}\n```\n\nThe URL has a `rest id` at the end of the collection URL. This URI is pointing to a member asset in the collection, which is why the `rest id` token is after the collection URI. \n\n<InlineNotification kind=\"info\">\nThe rest id is not the unique id for the Mbo. It's a generated id for the Mbo that is created using the primary-key attribute values. \n</InlineNotification>\n\n<InlineNotification kind=\"info\">\nx-method-override:PATCH instructs the server side to update the resource. As with create, you can specify the properties request header, to get back the results of an update. The sample here shows a value of *. We would generally recommend avoiding use of * (unless you really want all properties) and instead use the selected set of properties that you care about (works our better for performance).\n</InlineNotification>\n\nNote that we needed to fetch the URI of the `mxasset` resource in order to update it. The fetching of that URI can be done in two ways:\n\n* We can get the URI as part of a GET collection query, which returns all select members with their URIs.\n* As part of the response `location` header when we create a resource.\n\nAlthough this is the prevalent design for URI interaction in REST paradigm, in some cases you may not have the URI and still need to update the asset based on other key information.\n\n## Add child objects\n\nTo add some child objects, the following API example adds two `assetmeters` to the new asset.\n\n```\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE \nproperties:*\n```\n\nPost body:\n\n```json\n{\n  \"description\": \"test asset desc\",\n  \"assetmeter\": [\n    {\n      \"metername\": \"TEMP-F\",\n      \"linearassetid\": 0\n    },\n    {\n      \"metername\": \"ABC\",\n      \"linearassetid\": 0\n    }\n  ]\n}\n```\n\nAn extra request header called `patchtype` is used with a value of `MERGE`. This instructs the server to match the child objects - like `assetmeter` with the existing`assetmters` for this asset. If a match is found, that `assetmeter` gets updates with the request assetmeter. If a match is not found, an `assetmeter` is created. This action is called the `MERGE` API. For example, if the asset to be updated has three existing `assetmeters`, and the request contained one existing\n`assetmeter` and one new `assetmeter`, that asset will be having  4  `assetmeters`  with one newly created one and another updated `assetmeter` after the merge call.\n\nTo highlight the difference between a `PATCH` and `MERGE` call, you can run the same request without the `patchtype` header on another similar asset with  three ` assetmeters`. The server side creates a new `assetmeter` and update the existing `assetmeter` like the `MERGE` call. Unlike the `MERGE` call, the `assetmeters` that were not in the request are deleted. In this example, only two ` assetmeters` (that are in the request) remains in the asset. Thus in a `PATCH` request, the server side deletes all child objects that are not in the request payload.\n\n## Updating child objects\n\nTo update the child objects, the following example updates the `assetmeter` object to set the meter reading. Make sure that the `np` attributes, `newreading` and `newreadingdate` are included in the `MXAPIASSET` object structure.\n\n```\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE \nproperties:*\n```\n\nPost body:\n\n```json\n{\n  \"description\": \"test asset desc - updating temp meter\",\n  \"assetmeter\": [\n    {\n      \"metername\": \"TEMP-F\",\n      \"linearassetid\": 0,\n      \"newreading\": \"10\"\n    }\n  ]\n}\n```\n\nNotice that the primary keys of the `assetmeter` - `metername` and `linearassetid` for the meter update are included. Another option that the API allows is to use the href URI for the `assetmeter` instead of the primary keys, which is shown in the following example:\n\n```http\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE \nproperties:*\n\n{\n  \"description\": \"test asset desc - updating temp meter with child uri\",\n  \"assetmeter\": [\n    {\n      \"href\": \"parent uri#encoded_child_keys_anchored\",\n      \"newreading\": \"10\"\n    }\n  ]\n}\n```\n\n## Delete child objects\n\nThe following request below shows how to selectively delete a child object:\n\n```\nPOST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE\nproperties:*\n\n{\n  \"assetmeter\": [\n    {\n      \"metername\": \"TEMP-F\",\n      \"linearassetid\": 0,\n      \"_action\": \"Delete\"\n    }\n  ]\n}\n```\n\nNote the use of child level actions (`_action`) to delete the `assetmeter`. You could have also used the child href instead of the primary keys as shown before. You could have also used the http `DELETE` method to delete the child object using the child object `localuri` URI.\n\n```\nDELETE <assetmeter localuri>\n```\n\nNote the local URI for a child object (in Object structure) is something you can use to refer directly to the child object. You cannot do the same with the child href as that is an anchored URI. For example, you cannot use the child href for http `DELETE`.\n\nBy using the POST method with the `_action` child action, you can do a bulk delete of child objects, which you cannot do using the http `DELETE` method.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/crud/create_and_update.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
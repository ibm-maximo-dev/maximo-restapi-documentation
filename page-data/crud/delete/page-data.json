{"componentChunkName":"component---src-pages-crud-delete-mdx","path":"/crud/delete/","result":{"pageContext":{"frontmatter":{"title":"Delete resources"},"relativePagePath":"/crud/delete.mdx","titleType":"append","MdxNode":{"id":"e94b661c-2f87-5455-9323-b729bae6b7e8","children":[],"parent":"980eff06-267e-5ed1-8742-30209b9b82ff","internal":{"content":"---\ntitle: Delete resources\n---\n\nIn the previous section we talked about deleting child objects in an Object Structure resource. Any updation of the resources properties including adding, updating or deleting child objects is done under the update api for the resource. Deleting the resource (Object Structure root mbo) can be done using the sample api below:\n \n```\nDELETE /oslc/os/<os name>/{rest id}\n```\n\nYou will get a response of 200 OK if the delete is successful. We are also able to do the same using the following api below\n\n```\nPOST /oslc/os/<os name>/{rest id} \nx-method-override: PATCH\n\n{\n  \"_action\":\"Delete\"\n}\n```\n\nNote in certain cases some browsers do not allow the http DELETE and this POST equivalent is a good way to get around that.\n\nIt is also important to consider the fact that in Maximo, deleting a Mbo should internally delete the dependent child objects. The REST api merely invokes the delete routine on the Mbo, and is not responsible for what the mbo does internally to delete the dependent child objects.\n\nAdditionally there is an action api that can be leveraged to figure out if this Mbo can be deleted. This is needed to handle use cases where we would want to delete the resource in 2 steps ie to mark it for delete and then delete it later. To mark a resource for delete, we will at least need to verify if the resource can be deleted. Fortunately there is a Mbo call back api - canDelete() just for that purpose. This REST api sample below shows how to invoke that\n\n```\nGET /oslc/os/<os name>/{rest id}?action=system:candelete\n```\n\nA 200 OK response would indicate that the resource can be deleted. Note this depends on the application Mbo implementing the canDelete method, which is not implemented by default in the Mbo framework. If delete is not allowed, the response would an error json indicating the reason behind it as determined by the application Mbo.\n\nWe will talk more about actions in REST api in the next section.","type":"Mdx","contentDigest":"18bd81ca7f2033a66fd2ca17be9d1e5f","owner":"gatsby-plugin-mdx","counter":130},"frontmatter":{"title":"Delete resources"},"exports":{},"rawBody":"---\ntitle: Delete resources\n---\n\nIn the previous section we talked about deleting child objects in an Object Structure resource. Any updation of the resources properties including adding, updating or deleting child objects is done under the update api for the resource. Deleting the resource (Object Structure root mbo) can be done using the sample api below:\n \n```\nDELETE /oslc/os/<os name>/{rest id}\n```\n\nYou will get a response of 200 OK if the delete is successful. We are also able to do the same using the following api below\n\n```\nPOST /oslc/os/<os name>/{rest id} \nx-method-override: PATCH\n\n{\n  \"_action\":\"Delete\"\n}\n```\n\nNote in certain cases some browsers do not allow the http DELETE and this POST equivalent is a good way to get around that.\n\nIt is also important to consider the fact that in Maximo, deleting a Mbo should internally delete the dependent child objects. The REST api merely invokes the delete routine on the Mbo, and is not responsible for what the mbo does internally to delete the dependent child objects.\n\nAdditionally there is an action api that can be leveraged to figure out if this Mbo can be deleted. This is needed to handle use cases where we would want to delete the resource in 2 steps ie to mark it for delete and then delete it later. To mark a resource for delete, we will at least need to verify if the resource can be deleted. Fortunately there is a Mbo call back api - canDelete() just for that purpose. This REST api sample below shows how to invoke that\n\n```\nGET /oslc/os/<os name>/{rest id}?action=system:candelete\n```\n\nA 200 OK response would indicate that the resource can be deleted. Note this depends on the application Mbo implementing the canDelete method, which is not implemented by default in the Mbo framework. If delete is not allowed, the response would an error json indicating the reason behind it as determined by the application Mbo.\n\nWe will talk more about actions in REST api in the next section.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/crud/delete.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
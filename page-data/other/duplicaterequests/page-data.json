{"componentChunkName":"component---src-pages-other-duplicaterequests-mdx","path":"/other/duplicaterequests/","result":{"pageContext":{"frontmatter":{"title":"Handling duplicate requests in REST api"},"relativePagePath":"/other/duplicaterequests.mdx","titleType":"append","MdxNode":{"id":"8778e0e5-4e14-5163-9f72-c48886aea6bb","children":[],"parent":"df8ea058-9e5c-5f2d-af5d-f58ba92ad93e","internal":{"content":"---\ntitle: Handling duplicate requests in REST api\n---\n\nOften we will land up into a situation where the REST call committed successfully on the server, but the communication channel broke and the client got a 500 error. The client will think that the server rolled back the transaction and will end up re-sending the request. This in some cases can result in erroneous or duplicate data. To avoid this the REST api framework provides a mechanism to catch this double-dipping issue. The request for create/update/delete can contain a request header called `transactionid` which the api framework will validate for duplication. If it finds no matches, the transaction is good to go. If however a match is found, the request is rejected with a HTTP 409 Conflict error.\n\nNote that the transactionid header value is client generated and hence is the responsibility of the client code to make sure it is unique enough that is does not clash with another valid request. If the server does not find a match, it stores it as part of the request transaction commit so that in can reject future transactions with the same transaction id. The default life of the transaction id is 5 minutes, controlled by the escalation `OSLCTXN`. However this can be modified as per the installation need.\n\nNote that this feature is primarily useful when we are operating the REST client in an asynchronous or disconnected mode (much like the Anywhere platform). This feature may not make much sense for in the connected/interactive mode.","type":"Mdx","contentDigest":"ee69bbe78692afcb821507768769a55f","owner":"gatsby-plugin-mdx","counter":137},"frontmatter":{"title":"Handling duplicate requests in REST api"},"exports":{},"rawBody":"---\ntitle: Handling duplicate requests in REST api\n---\n\nOften we will land up into a situation where the REST call committed successfully on the server, but the communication channel broke and the client got a 500 error. The client will think that the server rolled back the transaction and will end up re-sending the request. This in some cases can result in erroneous or duplicate data. To avoid this the REST api framework provides a mechanism to catch this double-dipping issue. The request for create/update/delete can contain a request header called `transactionid` which the api framework will validate for duplication. If it finds no matches, the transaction is good to go. If however a match is found, the request is rejected with a HTTP 409 Conflict error.\n\nNote that the transactionid header value is client generated and hence is the responsibility of the client code to make sure it is unique enough that is does not clash with another valid request. If the server does not find a match, it stores it as part of the request transaction commit so that in can reject future transactions with the same transaction id. The default life of the transaction id is 5 minutes, controlled by the escalation `OSLCTXN`. However this can be modified as per the installation need.\n\nNote that this feature is primarily useful when we are operating the REST client in an asynchronous or disconnected mode (much like the Anywhere platform). This feature may not make much sense for in the connected/interactive mode.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/other/duplicaterequests.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
{"componentChunkName":"component---src-pages-other-troubleshooting-mdx","path":"/other/troubleshooting/","result":{"pageContext":{"frontmatter":{"title":"Troubleshooting the REST api"},"relativePagePath":"/other/troubleshooting.mdx","titleType":"append","MdxNode":{"id":"ca11d338-9797-5e8f-aab3-7994e4bd00ef","children":[],"parent":"bff3bc43-85c8-51fd-80d5-fca4d554d3c9","internal":{"content":"---\ntitle: Troubleshooting the REST api\n--- \n\nThe REST api leverages primarily the `integration` and `oslc` loggers for the api framework part. Enabling those 2 loggers to DEBUG or INFO will provide a good amount of debugging information. However, the rest apis will always interface with Maximo business objects and other maximo artifacts - security, scripting etc which will have their own loggers. On top of that, we will often need to enable the sql loggers whenever we feel the query result is not what the filter clause described.\n\nOne good way to debug this thing may be to use the thread logging functionality which is integrated with the rest api framework.\n\nThread logging is enabled on a per user basis within the rest api scope. This can be done from the maximo `Logging application -> Configure Custom logging -> Thread logging`. Choose the context name as `OSLC` and the user name as the `personid` of the user whose REST requests we want to track/debug. Next we can enable the logging with say - sql, oslc and integration loggers to start with.\n \nThis same step of enabling the thread logging can also be done by the user himself with the help of the rest api.\n\n```\nPOST /oslc/log/enablelogs\n```\n\nBody:\n```json\n[\n  \"log4j.logger.maximo.sql\",\n  \"log4j.logger.maximo.oslc\",\n  \"log4j.logger.m aximo.integration\"\n]\n```\n\nThis will enable the thread logging for the current logged in user for the loggers sql,oslc and integration. There is another api `/oslc/log/enablealllogs` that enables all logger for this user. We recommend not setting that one right away as it would generate a tonne of log which may make it hard to debug. We can disable this logging by making the call below:\n\n```\nPOST  /oslc/log/disablealllogs\n<no request body needed>\n```\n\nAs we make the requests with this setup for the desired user, the system keeps track of all the oslc, integration and sql logs generated for that user only. It will not mix the logs with other users or other contexts (other than OSLC) that may also generate logs.\n\nThis log can then be accessed using a rest api call `GET /oslc/log`. This will stream the log to the browser. This log is only for the user who was targeted with thread logging setup and can be accessed by only that user and only for that logged in user session. Once the session is done, this log can still be accessed by the server admin from the server's working directory. That would be a manual process - no rest api for that.","type":"Mdx","contentDigest":"fc8d984af88c9346f50d030ac5e68b40","owner":"gatsby-plugin-mdx","counter":140},"frontmatter":{"title":"Troubleshooting the REST api"},"exports":{},"rawBody":"---\ntitle: Troubleshooting the REST api\n--- \n\nThe REST api leverages primarily the `integration` and `oslc` loggers for the api framework part. Enabling those 2 loggers to DEBUG or INFO will provide a good amount of debugging information. However, the rest apis will always interface with Maximo business objects and other maximo artifacts - security, scripting etc which will have their own loggers. On top of that, we will often need to enable the sql loggers whenever we feel the query result is not what the filter clause described.\n\nOne good way to debug this thing may be to use the thread logging functionality which is integrated with the rest api framework.\n\nThread logging is enabled on a per user basis within the rest api scope. This can be done from the maximo `Logging application -> Configure Custom logging -> Thread logging`. Choose the context name as `OSLC` and the user name as the `personid` of the user whose REST requests we want to track/debug. Next we can enable the logging with say - sql, oslc and integration loggers to start with.\n \nThis same step of enabling the thread logging can also be done by the user himself with the help of the rest api.\n\n```\nPOST /oslc/log/enablelogs\n```\n\nBody:\n```json\n[\n  \"log4j.logger.maximo.sql\",\n  \"log4j.logger.maximo.oslc\",\n  \"log4j.logger.m aximo.integration\"\n]\n```\n\nThis will enable the thread logging for the current logged in user for the loggers sql,oslc and integration. There is another api `/oslc/log/enablealllogs` that enables all logger for this user. We recommend not setting that one right away as it would generate a tonne of log which may make it hard to debug. We can disable this logging by making the call below:\n\n```\nPOST  /oslc/log/disablealllogs\n<no request body needed>\n```\n\nAs we make the requests with this setup for the desired user, the system keeps track of all the oslc, integration and sql logs generated for that user only. It will not mix the logs with other users or other contexts (other than OSLC) that may also generate logs.\n\nThis log can then be accessed using a rest api call `GET /oslc/log`. This will stream the log to the browser. This log is only for the user who was targeted with thread logging setup and can be accessed by only that user and only for that logged in user session. Once the session is done, this log can still be accessed by the server admin from the server's working directory. That would be a manual process - no rest api for that.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/other/troubleshooting.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
{"componentChunkName":"component---src-pages-npmbo-mdx","path":"/npmbo/","result":{"pageContext":{"frontmatter":{"title":"Virtual (Non-persistent) Mbo support in REST API"},"relativePagePath":"/npmbo.mdx","titleType":"append","MdxNode":{"id":"7e850a06-b620-56fb-b6bb-4d4c7d5d21f3","children":[],"parent":"83ababd1-7b06-507f-86fb-f371fe8f2345","internal":{"content":"---\ntitle: Virtual (Non-persistent) Mbo support in REST API\n---\n\nA lot of Maximo business processes have been developed using virtual (non-persistent) mbos. These mbos have subtle differences in the life cycle callbacks/events compared to their persistent equivalents. MIF/REST did not full support for those callbacks like `setup()` and `execute()` until recently. Starting 761 this support is available. Using this, we can now leverage a lot Maximo functionality using apis/mif that was previously not easily accesible. Below is an example of downtime reporting using object structure MXAPIASSET. Note that the virtual mbo DOWNTIMEREPORT has been added to the MXAPIASSET as a child object to ASSET.\n\n```\nPOST /oslc/os/mxapiasset?lean=1\nx-method-override: SYNC\npatchtype: MERGE\n```\n\nBody:\n```json\n{\n  \"assetnum\": \"13150\",\n  \"siteid\": \"BEDFORD\",\n  \"downtimereport\": [\n    {\n      \"isdowntimereport\": \"1\",\n      \"startdate\": \"2019-07-17T22:57:56-04:00\",\n      \"enddate\": \"2019-07-17T22:58:59-04:00\",\n      \"code\": \"BRKDWN\"\n    }\n  ]\n}\n```\n\nThe above example also demonstrates the usage of the SYNC header, which is used when we want to avoid providing the individual asset url (with the rest id) and instead just want to use the collection url. The same could have been achieved using the asset url with the rest id and a x-method-override value as PATCH.","type":"Mdx","contentDigest":"549c25150af1942c953b81244aaec76f","owner":"gatsby-plugin-mdx","counter":144},"frontmatter":{"title":"Virtual (Non-persistent) Mbo support in REST API"},"exports":{},"rawBody":"---\ntitle: Virtual (Non-persistent) Mbo support in REST API\n---\n\nA lot of Maximo business processes have been developed using virtual (non-persistent) mbos. These mbos have subtle differences in the life cycle callbacks/events compared to their persistent equivalents. MIF/REST did not full support for those callbacks like `setup()` and `execute()` until recently. Starting 761 this support is available. Using this, we can now leverage a lot Maximo functionality using apis/mif that was previously not easily accesible. Below is an example of downtime reporting using object structure MXAPIASSET. Note that the virtual mbo DOWNTIMEREPORT has been added to the MXAPIASSET as a child object to ASSET.\n\n```\nPOST /oslc/os/mxapiasset?lean=1\nx-method-override: SYNC\npatchtype: MERGE\n```\n\nBody:\n```json\n{\n  \"assetnum\": \"13150\",\n  \"siteid\": \"BEDFORD\",\n  \"downtimereport\": [\n    {\n      \"isdowntimereport\": \"1\",\n      \"startdate\": \"2019-07-17T22:57:56-04:00\",\n      \"enddate\": \"2019-07-17T22:58:59-04:00\",\n      \"code\": \"BRKDWN\"\n    }\n  ]\n}\n```\n\nThe above example also demonstrates the usage of the SYNC header, which is used when we want to avoid providing the individual asset url (with the rest id) and instead just want to use the collection url. The same could have been achieved using the asset url with the rest id and a x-method-override value as PATCH.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/npmbo.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
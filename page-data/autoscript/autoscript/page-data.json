{"componentChunkName":"component---src-pages-autoscript-autoscript-mdx","path":"/autoscript/autoscript/","result":{"pageContext":{"frontmatter":{"title":"Automation Scripts"},"relativePagePath":"/autoscript/autoscript.mdx","titleType":"append","MdxNode":{"id":"6dbf974a-7d55-5b69-917d-3ec76c6ecccf","children":[],"parent":"fc7d7e77-527e-5a70-b50a-da458348571a","internal":{"content":"---\ntitle: Automation Scripts\n---\n\nThe rest api's have a tight integration with the automation scripts. Automation scripts can be leveraged to develop custom apis. A sample call shown below describes how automation scripts interact with rest apis.\n\nSay we want to find the total number of in progress work and service requests in a given site. Since there is no out of the box api for that, you will end up writing one for yourself. At this point in Maximo, let's say that we prefer to write any custom feature using automation scripting. Since this is rest apis with json response, we would prefer to use the JavaScript language for scripting. Say we want to call this api countofwoandsr. The api should look like this\n\n```\nGET /oslc/script/countofwoandsr?site=ABC\n```\n\nWe would like to get a response in json as below\n\n```json\n{\n  \"wocount\": 100,\n  \"srcount\": 20,\n  \"total\": 120\n}\n```\n\nNow let us write the script to get this api going. \n\nScript Name: countofwoandsr \n```js\nimportPackage(Packages.psdi.server);\n\nvar resp = {};\nvar site = request.getQueryParam(\"site\"); var woset = MXServer.getMXServer().getMboSet(\"workorder\",request.getUserInfo()); woset.setQbe(\"siteid\",\"=\"+site);\nvar woCount = woset.count(); resp.wocount = woCount;\n\nvar srset = MXServer.getMXServer().getMboSet(\"sr\",request.getUserInfo()); srset.setQbe(\"siteid\",\"=\"+site);\nvar srCount = srset.count(); resp.srcount = srCount; resp.total = srCount+woCount;\n \nvar responseBody = JSON.stringify(resp);\n```\n\nThat is pretty much what we should need to get this api going. All we need to do now is to save the script and open up our browser and fire off the GET request and see if the results come up as expected.\n\nWe talked about the GET support with automation scripts. We can now talk about how to leverage POST apis with scripting.\n\nAutomation scripts are also used for implementing custom queries and custom actions. We will discuss those in their respective sections.","type":"Mdx","contentDigest":"4c55c62e8003b438439c1db6e38492e3","owner":"gatsby-plugin-mdx","counter":130},"frontmatter":{"title":"Automation Scripts"},"exports":{},"rawBody":"---\ntitle: Automation Scripts\n---\n\nThe rest api's have a tight integration with the automation scripts. Automation scripts can be leveraged to develop custom apis. A sample call shown below describes how automation scripts interact with rest apis.\n\nSay we want to find the total number of in progress work and service requests in a given site. Since there is no out of the box api for that, you will end up writing one for yourself. At this point in Maximo, let's say that we prefer to write any custom feature using automation scripting. Since this is rest apis with json response, we would prefer to use the JavaScript language for scripting. Say we want to call this api countofwoandsr. The api should look like this\n\n```\nGET /oslc/script/countofwoandsr?site=ABC\n```\n\nWe would like to get a response in json as below\n\n```json\n{\n  \"wocount\": 100,\n  \"srcount\": 20,\n  \"total\": 120\n}\n```\n\nNow let us write the script to get this api going. \n\nScript Name: countofwoandsr \n```js\nimportPackage(Packages.psdi.server);\n\nvar resp = {};\nvar site = request.getQueryParam(\"site\"); var woset = MXServer.getMXServer().getMboSet(\"workorder\",request.getUserInfo()); woset.setQbe(\"siteid\",\"=\"+site);\nvar woCount = woset.count(); resp.wocount = woCount;\n\nvar srset = MXServer.getMXServer().getMboSet(\"sr\",request.getUserInfo()); srset.setQbe(\"siteid\",\"=\"+site);\nvar srCount = srset.count(); resp.srcount = srCount; resp.total = srCount+woCount;\n \nvar responseBody = JSON.stringify(resp);\n```\n\nThat is pretty much what we should need to get this api going. All we need to do now is to save the script and open up our browser and fire off the GET request and see if the results come up as expected.\n\nWe talked about the GET support with automation scripts. We can now talk about how to leverage POST apis with scripting.\n\nAutomation scripts are also used for implementing custom queries and custom actions. We will discuss those in their respective sections.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/autoscript/autoscript.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
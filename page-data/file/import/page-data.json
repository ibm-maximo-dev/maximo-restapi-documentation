{"componentChunkName":"component---src-pages-file-import-mdx","path":"/file/import/","result":{"pageContext":{"frontmatter":{"title":"Supporting File Import (CSV/XML) Import Preview using REST api"},"relativePagePath":"/file/import.mdx","titleType":"append","MdxNode":{"id":"ee079d33-d763-5c8b-89cf-1cc7df394533","children":[],"parent":"2117ed76-1899-5d69-bac4-3e84a2530f43","internal":{"content":"---\ntitle: Supporting File Import (CSV/XML) Import Preview using REST api\n---\n\nWe support uploading data from flat file or xml file to Maximo by restful API `action=importfile`, which leverages with Application Import capability in classic Maximo.\n\n## Prepare Object Structure\n\nFor import using the XML format, we do not need any special configuration to the Object Structure. For Flat file support, similar with the Application Import in Maximo, we need to configure Object Structure to support flat structure. This implies there shouldn't be any alias conflict for that specific Object Structure.\nTo verify that, find your target Object Structure, like MXAPIMETER in Object Structure Application. Make sure Support Flat Structure is checked and no alias conflict is detected by the system (this should be indicated by Alias Conflict checkbox is unchecked).\nIf there are any conflicted fields, find Add/Modify Alias from action list. Add new alias to conflicted field starting from first child object.\nThe rest of this section will focus on flat files. XML files would be exactly similar with a different header value.\n\n## Security\n\nThere is no special requirement on security - it just follows the normal Object structure security concepts. This implies that you got to have support for INSERT/SAVE/DELETE sigoptions (for your corresponding security application for the Object structure) to be able to import csv files.\n\n## Prepare CSV\n\nThe CSV format is exactly the same as what you would use in maximo classical application import. This implies when we try to import file from CSV, the attribute name of each field must match with attribute alias in Maximo.\n\nFor example, the csv file content can be as following\n```csv\nMETERNAME,METERTYPE,READINGTYPE,DESCRIPTION,MEASUREUNITID RUNHOURS2,CONTINUOUS,DELTA,Run Hours2,HOURS\nTEMP-F2,GAUGE,,Temperature in Fahrenheit2,DEG F\n```\n\n## Preview\n\nBefore processing the data into the database, it is always better to check if there is any error by using preview functionality. It is supported in import file API. Here is the sample:\n \n```\nPOST oslc/os/mxapimeter?action=importfile&lean=1 \nmaxauth:<base64 encoded user:password>\npreview:1\n```\nBody:\n```csv\nMETERNAME,METERTYPE,READINGTYPE,DESCRIPTION,MEASUREUNITID RUNHOURS2,CONTINUOUS,DELTA,Run Hours2,HOURS\nTEMP-F2,GAUGE,,Temperature in Fahrenheit2,DEG F\n```\n\nAfter we make the POST request to server, maximo will return the preview response which is including the validation information and warning messages.\n\nHere is the sample with error message:\n\n```json\n{\n  \"invaliddoc\": 2,// how many invalid records \n  \"totaldoc\": 2,//how many records in csv file in total \n  \"validdoc\": 0,//how many valid records\n  \"warningmsg\": \"\\nBMXAA5598E - Processing of an inbound transaction failed. The processing exception is identified in document 1.\\n\\tBMXAA0024E - The action ADD is not allowed on object METER. Verify the business rules for the object and define the appropriate action for the object.\\nBMXAA5598E - Processing of an inbound transaction failed. The processing exception is identified in document 2.\\n\\tBMXAA0024E - The action ADD is not allowed on object METER. Verify the business rules for the object and define the appropriate action for the object.\" //the error messages for each record.\n}\n```\n\nWe can tell what is the problem from warning messages then fix it. In the sample error responses, we can tell the issue is caused by missing the security setup. After granting the sigoptions and reprocess the call, the successful preview will look like following,\n\n```json\n{\n  \"invaliddoc\": 0,\n  \"totaldoc\": 2,\n  \"validdoc\": 2,\n  \"warningmsg\": \"\"\n}\n```\n \n## File Import\n\nAfter preview, we can import the file to maximo by removing preview header from request:\n\n```\nPOST oslc/os/mxapimeter?action=importfile&lean=1\n```\nBody:\n```csv\nMETERNAME,METERTYPE,READINGTYPE,DESCRIPTION,MEASUREUNITID RUNHOURS2,CONTINUOUS,DELTA,Run Hours2,HOURS\nTEMP-F2,GAUGE,,Temperature in Fahrenheit2,DEG F\n```\n\nAnd we can get response as following:\n```json\n{\n  \"validdoc\": 2\n}\n```\n\nWe also support other file type like XML, customized delimiter and textqualifier. You can easily configure them with the following headers when you do the POST call.\n\n|Header|Description|Default value|\n|--|--|--|\n|filetype|The type of the uploading file, it can be FLAT or XML|FLAT|\n|delimiter|The delimiter of csv file|,|\n|textqualifier|When the data include any delimiter, it will be wrapped by textqualifier|\"|\n|preview|If the importfile API is running in preview mode. It can be 0 or 1|0|","type":"Mdx","contentDigest":"74f7129629fdc0b73a75c8f3b794976a","owner":"gatsby-plugin-mdx","counter":135},"frontmatter":{"title":"Supporting File Import (CSV/XML) Import Preview using REST api"},"exports":{},"rawBody":"---\ntitle: Supporting File Import (CSV/XML) Import Preview using REST api\n---\n\nWe support uploading data from flat file or xml file to Maximo by restful API `action=importfile`, which leverages with Application Import capability in classic Maximo.\n\n## Prepare Object Structure\n\nFor import using the XML format, we do not need any special configuration to the Object Structure. For Flat file support, similar with the Application Import in Maximo, we need to configure Object Structure to support flat structure. This implies there shouldn't be any alias conflict for that specific Object Structure.\nTo verify that, find your target Object Structure, like MXAPIMETER in Object Structure Application. Make sure Support Flat Structure is checked and no alias conflict is detected by the system (this should be indicated by Alias Conflict checkbox is unchecked).\nIf there are any conflicted fields, find Add/Modify Alias from action list. Add new alias to conflicted field starting from first child object.\nThe rest of this section will focus on flat files. XML files would be exactly similar with a different header value.\n\n## Security\n\nThere is no special requirement on security - it just follows the normal Object structure security concepts. This implies that you got to have support for INSERT/SAVE/DELETE sigoptions (for your corresponding security application for the Object structure) to be able to import csv files.\n\n## Prepare CSV\n\nThe CSV format is exactly the same as what you would use in maximo classical application import. This implies when we try to import file from CSV, the attribute name of each field must match with attribute alias in Maximo.\n\nFor example, the csv file content can be as following\n```csv\nMETERNAME,METERTYPE,READINGTYPE,DESCRIPTION,MEASUREUNITID RUNHOURS2,CONTINUOUS,DELTA,Run Hours2,HOURS\nTEMP-F2,GAUGE,,Temperature in Fahrenheit2,DEG F\n```\n\n## Preview\n\nBefore processing the data into the database, it is always better to check if there is any error by using preview functionality. It is supported in import file API. Here is the sample:\n \n```\nPOST oslc/os/mxapimeter?action=importfile&lean=1 \nmaxauth:<base64 encoded user:password>\npreview:1\n```\nBody:\n```csv\nMETERNAME,METERTYPE,READINGTYPE,DESCRIPTION,MEASUREUNITID RUNHOURS2,CONTINUOUS,DELTA,Run Hours2,HOURS\nTEMP-F2,GAUGE,,Temperature in Fahrenheit2,DEG F\n```\n\nAfter we make the POST request to server, maximo will return the preview response which is including the validation information and warning messages.\n\nHere is the sample with error message:\n\n```json\n{\n  \"invaliddoc\": 2,// how many invalid records \n  \"totaldoc\": 2,//how many records in csv file in total \n  \"validdoc\": 0,//how many valid records\n  \"warningmsg\": \"\\nBMXAA5598E - Processing of an inbound transaction failed. The processing exception is identified in document 1.\\n\\tBMXAA0024E - The action ADD is not allowed on object METER. Verify the business rules for the object and define the appropriate action for the object.\\nBMXAA5598E - Processing of an inbound transaction failed. The processing exception is identified in document 2.\\n\\tBMXAA0024E - The action ADD is not allowed on object METER. Verify the business rules for the object and define the appropriate action for the object.\" //the error messages for each record.\n}\n```\n\nWe can tell what is the problem from warning messages then fix it. In the sample error responses, we can tell the issue is caused by missing the security setup. After granting the sigoptions and reprocess the call, the successful preview will look like following,\n\n```json\n{\n  \"invaliddoc\": 0,\n  \"totaldoc\": 2,\n  \"validdoc\": 2,\n  \"warningmsg\": \"\"\n}\n```\n \n## File Import\n\nAfter preview, we can import the file to maximo by removing preview header from request:\n\n```\nPOST oslc/os/mxapimeter?action=importfile&lean=1\n```\nBody:\n```csv\nMETERNAME,METERTYPE,READINGTYPE,DESCRIPTION,MEASUREUNITID RUNHOURS2,CONTINUOUS,DELTA,Run Hours2,HOURS\nTEMP-F2,GAUGE,,Temperature in Fahrenheit2,DEG F\n```\n\nAnd we can get response as following:\n```json\n{\n  \"validdoc\": 2\n}\n```\n\nWe also support other file type like XML, customized delimiter and textqualifier. You can easily configure them with the following headers when you do the POST call.\n\n|Header|Description|Default value|\n|--|--|--|\n|filetype|The type of the uploading file, it can be FLAT or XML|FLAT|\n|delimiter|The delimiter of csv file|,|\n|textqualifier|When the data include any delimiter, it will be wrapped by textqualifier|\"|\n|preview|If the importfile API is running in preview mode. It can be 0 or 1|0|","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/file/import.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
{"componentChunkName":"component---src-pages-groupby-groupby-mdx","path":"/groupby/groupby/","result":{"pageContext":{"frontmatter":{"title":"Aggregation"},"relativePagePath":"/groupby/groupby.mdx","titleType":"append","MdxNode":{"id":"b11cb2bc-057e-5cf0-b24f-c419e42990ea","children":[],"parent":"bc637ad3-5fb9-567c-a770-e40c263df5d3","internal":{"content":"---\ntitle: Aggregation\n---\n\nThis API provides the aggregation capability which allows us to get aggregation results, for example, max, min, count with flexible filtering and grouping on Maximo data. The results also provide collection links which only return the records in that group.\n\nThe following table describes the query parameters for aggregation:\n\n|Query|Parameters|Description|Example|\n|--|--|--|--|\n|gbcols|Define the attributes and aggregation function|gbcols=siteid, min.budgetcost, max.budgetcost,avg.totalcost|\n|gbfilters|Provide the ability to filter the aggregation result to a smaller set|gbfilters=siteid=\"BEDFORD\"|\n|gbsortby|Provide the ability to sort the aggregation result|gbsortby=-siteid|\n|gbrelprop|Provide the ability to get the related property back||\t\n|gbrange|Provide the ability to get the ranged aggregation result (only support count)|gbrange=assethealth|\n\n## Aggregation Column\n\nThe aggregation API is calculating results based on the selected `groupby` attribute and aggregation function we define in `gbcols`. For example, we are trying to get the minimum, maximum budget cost, the average total cost and the count number of the assets for all of the site.\nAt least one attribute must be provided as the grouping on attribute. In this example, it is siteid. \n\nThe following table describes the syntax and examples:\n\n|Aggregation|Description|Example|\n|--|--|--|\n|max.attributename|The maximum value of the attribute|max.budgetcost|\n|min.attributename|The minimum value of the attribute|min.budgetcost|\n|avg.attributename|The average value of the attribute|avg.totalcost|\n|count.attributename|The count number of record|count.*|\n\nFinally, `gbcols=siteid,max.budgetcost,min.budgetcost,avg.totalcost,count.*`\n\nThe aggregation results will be shown in the format of `<aggregation>_<attributename>`. For example, if we have `max.attributename`in the request, the result will be shown as `max_attributename`. The result also includes the data as well as a Resource Collection link, which gives you the resources in current group.\n\n```\nGET /oslc/os/mxapiasset?gbcols=siteid,count.*,min.budgetcost,max.budgetcost,avg.totalcost\n```\n\nExpected result:\n```json\n{\n  \"count\": 75,\n  \"max_budgetcost\": 2765.00,\n  \"collectionref\": \".../oslc/os/mxapiasset?&oslc.where=siteid%3D%22BOSTON%22\",\n  \"avg_totalcost\": 30901.17333333333333333333333,\n  \"siteid\": \"BOSTON\",\n  \"min_budgetcost\": 390.00\n}\n```\n\nThe `gbcols` also support multiple level aggregation. You can build the following parameters to get the aggregation results for `organization` and `site`.\n\n```\nGET /oslc/os/mxapiasset?gbcols=orgid,siteid,count.*,min.budgetcost,max.budgetcost,a vg.totalcost\n```\n\nExpected result:\n```json\n{\n  \"count\": 551,\n  \"orgid\": \"EAGLENA\",\n  \"max_budgetcost\": 25000.00,\n  \"collectionref\": collectionref,\n  \"avg_totalcost\": 436.87392014519056261343012,\n  \"siteid\": \"BEDFORD\",\n  \"min_budgetcost\": 0.00\n}\n```\n\n## Aggregation Filter\n\nAggregation filter (gbfilter) is used to further filter the results. For example, we would to get the result for smaller set of records instead of full table. That's the time we can leverage `gbfilter`, which is equivalent to `having` clause in `SQL` term. The value for this query parameter must follow the SQL clause format. \n\nFor example, you want to get the grouped result only for `BEDFORD`. Then there is:\n\n```\nGET /oslc/os/mxapiasset?gbcols=siteid,count.*&gbfilter=siteid='BEDFORD'\n```\n\nExpected result:\n```json\n{\n  \"count\": 551,\n  \"sum_totalcost\": 240717.53,\n  \"collectionref\": \".../oslc/os/mxapiasset?&oslc.where=siteid%3D%22BEDFORD%22\",\n  \"siteid\": \"BEDFORD\"\n}\n```\n\n## Aggregation Sort By\n\nTo sort the aggregated result by certain attribute, we can leverage `gbsortby` with the available aggregated columns. It support both ascending and descending order.\n\nFor example, you want to sort the result set by Site in descending order.\n\n```\nGET /oslc/os/mxapiasset?gbcols=siteid,count.*&gbsortby=-siteid\n```\n\nFor ascending order, the item should be `gbsortby=+siteid`. However, when tested in the browser, it is necessary to encode the value for `gbsortby`. There is online sites to help you to do it. Copy the value `+siteid` from URL and encode it. Bring it and copy to URL. Finally, you can get `gbsortby=%2Bsiteid` to show the results by Site in ascending order.\n\nExample of ascending order:\n\n```\nGET /oslc/os/mxapiasset?gbcols=siteid,count.*&gbsortby=%2Bsiteid\n```\n\n## Aggregation Range\n\nSometimes we need to further group the aggregation results together according to certain range. In Maximo, you can use `gbrange` to get this task done. The format is different due to the data type.\n\n### String(ALN) value\n\nFor example, we are trying to get the total count for work orders which is in WAPPR or APPR status. The gbrange syntax will be like `gbrange=status={[APPR:WAPPR]}`\n\nIn result set, the result for APPR or WAPPR will be added to a new group with a different total count and collection link. All the other result, like `status=\"CAN\"` will be shown as the normal result.\n\n```\nGET /maximo/oslc/os/mxwodetail?gbcols=status,count.*&gbrange=status={[APPR:WAPPR]}\n```\n\nExpected result:\n```json\n{\n  \"count\": 2388,\n  \"status\": [\n    \"APPR\",\n    \"WAPPR\"\n  ],\n  \"collectionref\": \".../oslc/os/mxwodetail?oslc.where=status+in+%5B%22APPR%22%2C%22WAPPR %22%5D\"\n}\n```\n\n### Numeric value\n\nThe numeric value range is defined in a different way. For example, assume we need to get the count for workorder per wopriority and group them together for cerntain ranges. Let's say the first range is 1<=worpriority<=3 and the second range is 4<=wopriority<7.\n\nThe rules to build the range is following the mathematics. \"[\" and \"]\" means greater or less than including the side value. \"(\" and \")\" means greater or less than exclude the side value. \n\nIn our case, we will have, `gbrange=wopriorty={[1..3],[4..7)}`\n\nWe will see the priority=7 group has been excluded from the ranged result.\n\n```\nGET /oslc/os/mxwodetail?gbcols=wopriority,count.*&gbrange=wopriority={[1..3],[4..7)}\n```\n\nExpected result:\n```json\n{\n  \"count\": 32,\n  \"collectionref\": \".../oslc/os/mxwodetail?&oslc.where=wopriority%3D7\",\n  \"wopriority\": 7\n},\n{\n  \"count\": 390,\n  \"collectionref\": \".../oslc/os/mxwodetail?&oslc.where=wopriority%3E%3D4+and+wopriority% 3C7\",\n  \"wopriority\": [\n    4.0,\n    7.0\n  ]\n},\n{\n  \"count\": 66415,\n  \"collectionref\": \".../oslc/os/mxwodetail?&oslc.where=wopriority%3E%3D1+and+wopriority% 3C%3D3\",\n  \"wopriority\": [\n    1.0,\n    3.0\n  ]\n}\n```","type":"Mdx","contentDigest":"d942fb82e74f9ef1aec78a1d743ceb3a","owner":"gatsby-plugin-mdx","counter":163},"frontmatter":{"title":"Aggregation"},"exports":{},"rawBody":"---\ntitle: Aggregation\n---\n\nThis API provides the aggregation capability which allows us to get aggregation results, for example, max, min, count with flexible filtering and grouping on Maximo data. The results also provide collection links which only return the records in that group.\n\nThe following table describes the query parameters for aggregation:\n\n|Query|Parameters|Description|Example|\n|--|--|--|--|\n|gbcols|Define the attributes and aggregation function|gbcols=siteid, min.budgetcost, max.budgetcost,avg.totalcost|\n|gbfilters|Provide the ability to filter the aggregation result to a smaller set|gbfilters=siteid=\"BEDFORD\"|\n|gbsortby|Provide the ability to sort the aggregation result|gbsortby=-siteid|\n|gbrelprop|Provide the ability to get the related property back||\t\n|gbrange|Provide the ability to get the ranged aggregation result (only support count)|gbrange=assethealth|\n\n## Aggregation Column\n\nThe aggregation API is calculating results based on the selected `groupby` attribute and aggregation function we define in `gbcols`. For example, we are trying to get the minimum, maximum budget cost, the average total cost and the count number of the assets for all of the site.\nAt least one attribute must be provided as the grouping on attribute. In this example, it is siteid. \n\nThe following table describes the syntax and examples:\n\n|Aggregation|Description|Example|\n|--|--|--|\n|max.attributename|The maximum value of the attribute|max.budgetcost|\n|min.attributename|The minimum value of the attribute|min.budgetcost|\n|avg.attributename|The average value of the attribute|avg.totalcost|\n|count.attributename|The count number of record|count.*|\n\nFinally, `gbcols=siteid,max.budgetcost,min.budgetcost,avg.totalcost,count.*`\n\nThe aggregation results will be shown in the format of `<aggregation>_<attributename>`. For example, if we have `max.attributename`in the request, the result will be shown as `max_attributename`. The result also includes the data as well as a Resource Collection link, which gives you the resources in current group.\n\n```\nGET /oslc/os/mxapiasset?gbcols=siteid,count.*,min.budgetcost,max.budgetcost,avg.totalcost\n```\n\nExpected result:\n```json\n{\n  \"count\": 75,\n  \"max_budgetcost\": 2765.00,\n  \"collectionref\": \".../oslc/os/mxapiasset?&oslc.where=siteid%3D%22BOSTON%22\",\n  \"avg_totalcost\": 30901.17333333333333333333333,\n  \"siteid\": \"BOSTON\",\n  \"min_budgetcost\": 390.00\n}\n```\n\nThe `gbcols` also support multiple level aggregation. You can build the following parameters to get the aggregation results for `organization` and `site`.\n\n```\nGET /oslc/os/mxapiasset?gbcols=orgid,siteid,count.*,min.budgetcost,max.budgetcost,a vg.totalcost\n```\n\nExpected result:\n```json\n{\n  \"count\": 551,\n  \"orgid\": \"EAGLENA\",\n  \"max_budgetcost\": 25000.00,\n  \"collectionref\": collectionref,\n  \"avg_totalcost\": 436.87392014519056261343012,\n  \"siteid\": \"BEDFORD\",\n  \"min_budgetcost\": 0.00\n}\n```\n\n## Aggregation Filter\n\nAggregation filter (gbfilter) is used to further filter the results. For example, we would to get the result for smaller set of records instead of full table. That's the time we can leverage `gbfilter`, which is equivalent to `having` clause in `SQL` term. The value for this query parameter must follow the SQL clause format. \n\nFor example, you want to get the grouped result only for `BEDFORD`. Then there is:\n\n```\nGET /oslc/os/mxapiasset?gbcols=siteid,count.*&gbfilter=siteid='BEDFORD'\n```\n\nExpected result:\n```json\n{\n  \"count\": 551,\n  \"sum_totalcost\": 240717.53,\n  \"collectionref\": \".../oslc/os/mxapiasset?&oslc.where=siteid%3D%22BEDFORD%22\",\n  \"siteid\": \"BEDFORD\"\n}\n```\n\n## Aggregation Sort By\n\nTo sort the aggregated result by certain attribute, we can leverage `gbsortby` with the available aggregated columns. It support both ascending and descending order.\n\nFor example, you want to sort the result set by Site in descending order.\n\n```\nGET /oslc/os/mxapiasset?gbcols=siteid,count.*&gbsortby=-siteid\n```\n\nFor ascending order, the item should be `gbsortby=+siteid`. However, when tested in the browser, it is necessary to encode the value for `gbsortby`. There is online sites to help you to do it. Copy the value `+siteid` from URL and encode it. Bring it and copy to URL. Finally, you can get `gbsortby=%2Bsiteid` to show the results by Site in ascending order.\n\nExample of ascending order:\n\n```\nGET /oslc/os/mxapiasset?gbcols=siteid,count.*&gbsortby=%2Bsiteid\n```\n\n## Aggregation Range\n\nSometimes we need to further group the aggregation results together according to certain range. In Maximo, you can use `gbrange` to get this task done. The format is different due to the data type.\n\n### String(ALN) value\n\nFor example, we are trying to get the total count for work orders which is in WAPPR or APPR status. The gbrange syntax will be like `gbrange=status={[APPR:WAPPR]}`\n\nIn result set, the result for APPR or WAPPR will be added to a new group with a different total count and collection link. All the other result, like `status=\"CAN\"` will be shown as the normal result.\n\n```\nGET /maximo/oslc/os/mxwodetail?gbcols=status,count.*&gbrange=status={[APPR:WAPPR]}\n```\n\nExpected result:\n```json\n{\n  \"count\": 2388,\n  \"status\": [\n    \"APPR\",\n    \"WAPPR\"\n  ],\n  \"collectionref\": \".../oslc/os/mxwodetail?oslc.where=status+in+%5B%22APPR%22%2C%22WAPPR %22%5D\"\n}\n```\n\n### Numeric value\n\nThe numeric value range is defined in a different way. For example, assume we need to get the count for workorder per wopriority and group them together for cerntain ranges. Let's say the first range is 1<=worpriority<=3 and the second range is 4<=wopriority<7.\n\nThe rules to build the range is following the mathematics. \"[\" and \"]\" means greater or less than including the side value. \"(\" and \")\" means greater or less than exclude the side value. \n\nIn our case, we will have, `gbrange=wopriorty={[1..3],[4..7)}`\n\nWe will see the priority=7 group has been excluded from the ranged result.\n\n```\nGET /oslc/os/mxwodetail?gbcols=wopriority,count.*&gbrange=wopriority={[1..3],[4..7)}\n```\n\nExpected result:\n```json\n{\n  \"count\": 32,\n  \"collectionref\": \".../oslc/os/mxwodetail?&oslc.where=wopriority%3D7\",\n  \"wopriority\": 7\n},\n{\n  \"count\": 390,\n  \"collectionref\": \".../oslc/os/mxwodetail?&oslc.where=wopriority%3E%3D4+and+wopriority% 3C7\",\n  \"wopriority\": [\n    4.0,\n    7.0\n  ]\n},\n{\n  \"count\": 66415,\n  \"collectionref\": \".../oslc/os/mxwodetail?&oslc.where=wopriority%3E%3D1+and+wopriority% 3C%3D3\",\n  \"wopriority\": [\n    1.0,\n    3.0\n  ]\n}\n```","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/groupby/groupby.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
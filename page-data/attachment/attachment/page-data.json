{"componentChunkName":"component---src-pages-attachment-attachment-mdx","path":"/attachment/attachment/","result":{"pageContext":{"frontmatter":{"title":"Handling Attachments"},"relativePagePath":"/attachment/attachment.mdx","titleType":"append","MdxNode":{"id":"acba033c-5aa6-588c-8d0e-2c65c9ba4c14","children":[],"parent":"6cdf489c-feb6-5530-a0f3-9c601ba9ced3","internal":{"content":"---\ntitle: Handling Attachments\n---\n\nAttachments in Maximo Asset Management are documents, files, or images that are attached to a resource such as an Asset or Service Request. The RESTful API supports the retrieval of attachments that are associated with resources.\n\nTo fetch, create, update, or delete an attachment for a resource by using API, such as `MXAPIASSET`, complete the following tasks:\n\n1. Enable the attachments feature.\n2. Configure the `MXAPIASSET` object structure with the `DOCLINKS` MBO as a child to the `ASSET` object.\n\n## Fetch the attachments\n\nWhen you query a specific resource (using its ID) that has an attachment, a doclinks URL is returned for the attachment:\n\n```\nGET /oslc/os/mxapiasset/{rest id}?lean=1\n```\n\n```json\n{\n  \"assetnum\": \"1001\",\n  \"changedate\": \"1999-03-31T16:53:00-05:00\",\n  \"doclinks\": {\n    \"href\": \"oslc/os/mxapiasset/{rest id}/doclinks\"\n  }\n}\n```\n\nIf you use the `doclinks` URL from the JSON data in the previous example, you receive a list of attached documents (reference to those documents) with the metadata.\n\n``` \nGET oslc/os/mxapiasset/{rest id}/doclinks?lean=1\n```\n\n```json\n{\n  \"href\": \"oslc\\/os\\/mxapiasset\\/{rest id}\\/doclinks\",\n  \"member\": [\n    {\n      \"href\": \"oslc\\/os\\/mxapiasset\\/{rest id}\\/doclinks\\/75\",\n      \"localref\": \"oslc\\/os\\/mxapiasset\\/{rest id}\\/doclinks\\/0-75\",\n      \"describedBy\": {\n        \"identifier\": \"75\",\n        \"fileName\": \"linearasset_screenshot.png\",\n        \"upload\": false,\n        \"created\": \"2023-06-07T13:18:49-04:00\",\n        \"docType\": \"Attachments\",\n        \"changeby\": \"WILSON\",\n        \"format\": {\n          \"href\": \"http:\\/\\/purl.org\\/NET\\/mediatypes\\/image\\/png\",\n          \"label\": \"image\\/png\"\n        },\n        \"show\": false,\n        \"description\": \"linearasset_screenshot.png\",\n        \"ownerid\": 53,\n        \"ownertable\": \"ASSET\",\n        \"title\": \"1020\",\n        \"docinfoid\": 57,\n        \"copylinktowo\": false,\n        \"createby\": \"WILSON\",\n        \"urlType\": \"FILE\",\n        \"attachmentSize\": 3045941,\n        \"getlatestversion\": true,\n        \"printthrulink\": true,\n        \"modified\": \"2023-06-07T13:19:09-04:00\",\n        \"href\": \"oslc\\/os\\/mxapiasset\\/{rest id}\\/doclinks\\/meta\\/75\",\n        \"addinfo\": false\n      }\n    }\n  ]\n}\n```\n \nThe `.../doclinks/{id}` URL is the link to the actual attachment file.  The content of the attachment can be fetched by,\n\n```\nGET oslc/os/mxapisset/{rest id}/doclinks/{id}\n```\n\nThe `.../doclinks/meta/{id}` URL is the link to the metadata for the attachment file.\n\n## Create the attachments\n\nThe API supports the creation of attachments that are associated to resources. For example, after creating an asset, you want to attach a PDF file that describes the maintenance procedures for that asset. \n\nTo create a new attachment, you will need an doclinks URL for resource. As shown in fetching the attachment, take MXASSET as an example, the URL looks like as following,\n\n```json\n\"doclinks\": {\n  \"href\": \"oslc/os/mxapiasset/{asset rest id}/doclinks\"\n},\n\n```\n\nAn attachment is made up of two components:\n\n1. Attachment file: You create an attachment by using the HTTP POST with binary content or base64 binary content. There is currently no support for multi-part messages.\n\n2. Related metadata of the attachment: When creating an attachment for a resource there is a limited set of metadata that can be provided (along with the file) using HTTP Headers:\n\n|Header|Value|Description|\n|--|--|--|\n|slug|File Name|The name of the attachment file|\n|encslug|File Name|If the attachment file name has non-ascii characters it can be provided in the header base64 encoded. It is suggested that you always base64 encode your file name using this property if you believe you might have a mix of non-ascii characters|\n|Content-Type|\"text/plain\"|Based on the type of attachment - text/plain supports a .txt file|\n|x-document-meta|Attachments|Tied to the DOCTYPES domain that defines the supported attachment types|\n|x-document-description|Description|The description of the document|\n|x-document-encdescription|Description|If the description has non-ASCII characters, it can be provided in the header base64 encoded. It is suggested that you always base64 encode your description using this property if you believe you might have a mix of non-ascii characters|\n|custom-encoding|\"base64\"|This header facilitates testing using a browser client such as RESTClient (for FF). Allows you to paste in a base64 encoded image into the Body of the tool (otherwise you need to test with programmatic tool). You can use public tools to base64 encode your image file|\n\nExample:\n```\nPOST oslc/os/mxapiasset/{asset rest id}/doclinks \nx-document-meta: FILE/Attachments\nslug: test.txt\nx-document-description:test file \n\nBody:\nHello this is my first test file\n```\n\nThe response Location header contains the URL for the uploaded attachment (as shown in the following example).\n \n```\nLocation: oslc/os/mxapiasset/{asset rest id}/doclinks/{id}\n```\n\nThe GET on that URL will get the attached document that was uploaded before. Along with that, it also has a response header that is named Link, which has a URL to the metadata for this attachment.\n\n```\nLink: oslc/os/mxapiasset/{asset rest id}/doclinks/meta/{id}\n```\n\nThis `meta` link can be used to get the metadata for the attachment. A `GET` on that link will fetch the JSON representation of the document description, mimetype etc as shown in the following example.\n\nTo create attachments of a WWW (URL) type, you can use the following request as an example:\n\n```\nPOST /oslc/os/mxapiasse/{asset rest id}/doclinks\nx-document-meta: URL/Attachments\nslug: CNN\ncontent-location: www.cnn.com\nx-document-description:cnn web site\n```\n\nIn the response, you get a Location header with the URL of the newly created URL attachment. Note that the URL was set on the content-location request header. The `slug` request header is used as the name of the attachment.\n\nAnother important thing to note: the `x-document-meta` request header has 2 parts - the URL type and document type. The URL type is a synonymdomain in Maximo Asset Management and hence hardcoding the values `FILE` or `URL` maybe a problem in case those values have been modified during installation. You could potentially do one of the 2\n\n1. Avoid specifying the URL type altogether. The API framework defaults to the URL type based on your request. For example, if the request has the content-location header, it will be treated as a URL type with internal value of WWW. Otherwise it will treated as a URL type of FILE. In each of these cases the system will use the default external value for these internal values (FILE or WWW).\n2. The other option would be to fetch the external values of the FILE and WWW types and then use that in the client side code to set the x-document-meta.\n\nWe tend to prefer the first approach as its simpler of the client.\n\n\n## Update the attachments\n\n<InlineNotification kind=\"info\">\nThere is no support to update an attachment. To revise an attachment, you need to delete the current version and create a new version.\n</InlineNotification>\n\n## Delete the attachments\n\nYou can delete attachments by using the HTTP POST with the URL of the attachment and providing the x-method-override header with a value of DELETE.\n\n```\nPOST oslc/os/mxapiasset/_MTAwMS9CRURGT1JE/doclinks/80 \nx-method-override: DELETE\n```\n\n## Handling attachments as part of the resource json\n\nThe following example adds two attached documents as part of asset creation:\n\n```\nPOST /oslc/os/mxapiasset\n```\n\n```json\n{\n  \"assetnum\": \"TEST299\",\n  \"siteid\": \"BEDFORD\",\n  \"doclinks\": [\n    {\n      \"urltype\": \"FILE\",\n      \"documentdata\": \"aGV5IGhvdyBhcmUgeW91\",\n      \"doctype\": \"Attachments\",\n      \"urlname\": \"greetingsabcd.txt\"\n    },\n    {\n      \"urltype\": \"FILE\",\n      \"documentdata\": \"aGV5IGhvdyBpcyB0aGF0\",\n      \"doctype\": \"Attachments\",\n      \"urlname\": \"howisthatfor.txt\"\n    }\n  ]\n}\n```\n\nIn this example, the `documentdata` attribute has the base64 encoded document.\n\nBelow is an example of doing the same with WWW (url based) attachments:\n\n```\nPOST /oslc/os/mxapiasset\n```\n\n```json\n{\n  \"assetnum\": \"TEST399\",\n  \"siteid\": \"BEDFORD\",\n  \"doclinks\": [\n    {\n      \"urltype\": \"URL\",\n      \"doctype\": \"Attachments\",\n      \"title\": \"espn\",\n      \"newurlname\": \"www.espn.com\",\n      \"urlname\": \"www.espn.com\"\n    }\n  ]\n}\n```\n\nWe also support getting attachments inline as part of a json document. To do this just use the query parameter inlinedoc=1. An example shown below\n\n```\nGET /oslc/os/mxapiasset/{rest id}?inlinedoc=1\n```\n\n```json\n{\n  \"assetnum\": \"TEST299\",\n  \"siteid\": \"BEDFORD\",\n  \"doclinks\": [\n    {\n      \"urltype\": \"FILE\",\n      \"documentdata\": \"aGV5IGhvdyBhcmUgeW91\",\n      \"doctype\": \"Attachments\",\n      \"urlname\": \"greetingsabcd.txt\"\n    },\n    {\n      \"urltype\": \"FILE\",\n      \"documentdata\": \"aGV5IGhvdyBpcyB0aGF0\",\n      \"doctype\": \"Attachments\",\n      \"urlname\": \"howisthatfor.txt\"\n    }\n  ]\n}\n```","type":"Mdx","contentDigest":"28cacb2e0e2b3e256bab0238e7129174","owner":"gatsby-plugin-mdx","counter":156},"frontmatter":{"title":"Handling Attachments"},"exports":{},"rawBody":"---\ntitle: Handling Attachments\n---\n\nAttachments in Maximo Asset Management are documents, files, or images that are attached to a resource such as an Asset or Service Request. The RESTful API supports the retrieval of attachments that are associated with resources.\n\nTo fetch, create, update, or delete an attachment for a resource by using API, such as `MXAPIASSET`, complete the following tasks:\n\n1. Enable the attachments feature.\n2. Configure the `MXAPIASSET` object structure with the `DOCLINKS` MBO as a child to the `ASSET` object.\n\n## Fetch the attachments\n\nWhen you query a specific resource (using its ID) that has an attachment, a doclinks URL is returned for the attachment:\n\n```\nGET /oslc/os/mxapiasset/{rest id}?lean=1\n```\n\n```json\n{\n  \"assetnum\": \"1001\",\n  \"changedate\": \"1999-03-31T16:53:00-05:00\",\n  \"doclinks\": {\n    \"href\": \"oslc/os/mxapiasset/{rest id}/doclinks\"\n  }\n}\n```\n\nIf you use the `doclinks` URL from the JSON data in the previous example, you receive a list of attached documents (reference to those documents) with the metadata.\n\n``` \nGET oslc/os/mxapiasset/{rest id}/doclinks?lean=1\n```\n\n```json\n{\n  \"href\": \"oslc\\/os\\/mxapiasset\\/{rest id}\\/doclinks\",\n  \"member\": [\n    {\n      \"href\": \"oslc\\/os\\/mxapiasset\\/{rest id}\\/doclinks\\/75\",\n      \"localref\": \"oslc\\/os\\/mxapiasset\\/{rest id}\\/doclinks\\/0-75\",\n      \"describedBy\": {\n        \"identifier\": \"75\",\n        \"fileName\": \"linearasset_screenshot.png\",\n        \"upload\": false,\n        \"created\": \"2023-06-07T13:18:49-04:00\",\n        \"docType\": \"Attachments\",\n        \"changeby\": \"WILSON\",\n        \"format\": {\n          \"href\": \"http:\\/\\/purl.org\\/NET\\/mediatypes\\/image\\/png\",\n          \"label\": \"image\\/png\"\n        },\n        \"show\": false,\n        \"description\": \"linearasset_screenshot.png\",\n        \"ownerid\": 53,\n        \"ownertable\": \"ASSET\",\n        \"title\": \"1020\",\n        \"docinfoid\": 57,\n        \"copylinktowo\": false,\n        \"createby\": \"WILSON\",\n        \"urlType\": \"FILE\",\n        \"attachmentSize\": 3045941,\n        \"getlatestversion\": true,\n        \"printthrulink\": true,\n        \"modified\": \"2023-06-07T13:19:09-04:00\",\n        \"href\": \"oslc\\/os\\/mxapiasset\\/{rest id}\\/doclinks\\/meta\\/75\",\n        \"addinfo\": false\n      }\n    }\n  ]\n}\n```\n \nThe `.../doclinks/{id}` URL is the link to the actual attachment file.  The content of the attachment can be fetched by,\n\n```\nGET oslc/os/mxapisset/{rest id}/doclinks/{id}\n```\n\nThe `.../doclinks/meta/{id}` URL is the link to the metadata for the attachment file.\n\n## Create the attachments\n\nThe API supports the creation of attachments that are associated to resources. For example, after creating an asset, you want to attach a PDF file that describes the maintenance procedures for that asset. \n\nTo create a new attachment, you will need an doclinks URL for resource. As shown in fetching the attachment, take MXASSET as an example, the URL looks like as following,\n\n```json\n\"doclinks\": {\n  \"href\": \"oslc/os/mxapiasset/{asset rest id}/doclinks\"\n},\n\n```\n\nAn attachment is made up of two components:\n\n1. Attachment file: You create an attachment by using the HTTP POST with binary content or base64 binary content. There is currently no support for multi-part messages.\n\n2. Related metadata of the attachment: When creating an attachment for a resource there is a limited set of metadata that can be provided (along with the file) using HTTP Headers:\n\n|Header|Value|Description|\n|--|--|--|\n|slug|File Name|The name of the attachment file|\n|encslug|File Name|If the attachment file name has non-ascii characters it can be provided in the header base64 encoded. It is suggested that you always base64 encode your file name using this property if you believe you might have a mix of non-ascii characters|\n|Content-Type|\"text/plain\"|Based on the type of attachment - text/plain supports a .txt file|\n|x-document-meta|Attachments|Tied to the DOCTYPES domain that defines the supported attachment types|\n|x-document-description|Description|The description of the document|\n|x-document-encdescription|Description|If the description has non-ASCII characters, it can be provided in the header base64 encoded. It is suggested that you always base64 encode your description using this property if you believe you might have a mix of non-ascii characters|\n|custom-encoding|\"base64\"|This header facilitates testing using a browser client such as RESTClient (for FF). Allows you to paste in a base64 encoded image into the Body of the tool (otherwise you need to test with programmatic tool). You can use public tools to base64 encode your image file|\n\nExample:\n```\nPOST oslc/os/mxapiasset/{asset rest id}/doclinks \nx-document-meta: FILE/Attachments\nslug: test.txt\nx-document-description:test file \n\nBody:\nHello this is my first test file\n```\n\nThe response Location header contains the URL for the uploaded attachment (as shown in the following example).\n \n```\nLocation: oslc/os/mxapiasset/{asset rest id}/doclinks/{id}\n```\n\nThe GET on that URL will get the attached document that was uploaded before. Along with that, it also has a response header that is named Link, which has a URL to the metadata for this attachment.\n\n```\nLink: oslc/os/mxapiasset/{asset rest id}/doclinks/meta/{id}\n```\n\nThis `meta` link can be used to get the metadata for the attachment. A `GET` on that link will fetch the JSON representation of the document description, mimetype etc as shown in the following example.\n\nTo create attachments of a WWW (URL) type, you can use the following request as an example:\n\n```\nPOST /oslc/os/mxapiasse/{asset rest id}/doclinks\nx-document-meta: URL/Attachments\nslug: CNN\ncontent-location: www.cnn.com\nx-document-description:cnn web site\n```\n\nIn the response, you get a Location header with the URL of the newly created URL attachment. Note that the URL was set on the content-location request header. The `slug` request header is used as the name of the attachment.\n\nAnother important thing to note: the `x-document-meta` request header has 2 parts - the URL type and document type. The URL type is a synonymdomain in Maximo Asset Management and hence hardcoding the values `FILE` or `URL` maybe a problem in case those values have been modified during installation. You could potentially do one of the 2\n\n1. Avoid specifying the URL type altogether. The API framework defaults to the URL type based on your request. For example, if the request has the content-location header, it will be treated as a URL type with internal value of WWW. Otherwise it will treated as a URL type of FILE. In each of these cases the system will use the default external value for these internal values (FILE or WWW).\n2. The other option would be to fetch the external values of the FILE and WWW types and then use that in the client side code to set the x-document-meta.\n\nWe tend to prefer the first approach as its simpler of the client.\n\n\n## Update the attachments\n\n<InlineNotification kind=\"info\">\nThere is no support to update an attachment. To revise an attachment, you need to delete the current version and create a new version.\n</InlineNotification>\n\n## Delete the attachments\n\nYou can delete attachments by using the HTTP POST with the URL of the attachment and providing the x-method-override header with a value of DELETE.\n\n```\nPOST oslc/os/mxapiasset/_MTAwMS9CRURGT1JE/doclinks/80 \nx-method-override: DELETE\n```\n\n## Handling attachments as part of the resource json\n\nThe following example adds two attached documents as part of asset creation:\n\n```\nPOST /oslc/os/mxapiasset\n```\n\n```json\n{\n  \"assetnum\": \"TEST299\",\n  \"siteid\": \"BEDFORD\",\n  \"doclinks\": [\n    {\n      \"urltype\": \"FILE\",\n      \"documentdata\": \"aGV5IGhvdyBhcmUgeW91\",\n      \"doctype\": \"Attachments\",\n      \"urlname\": \"greetingsabcd.txt\"\n    },\n    {\n      \"urltype\": \"FILE\",\n      \"documentdata\": \"aGV5IGhvdyBpcyB0aGF0\",\n      \"doctype\": \"Attachments\",\n      \"urlname\": \"howisthatfor.txt\"\n    }\n  ]\n}\n```\n\nIn this example, the `documentdata` attribute has the base64 encoded document.\n\nBelow is an example of doing the same with WWW (url based) attachments:\n\n```\nPOST /oslc/os/mxapiasset\n```\n\n```json\n{\n  \"assetnum\": \"TEST399\",\n  \"siteid\": \"BEDFORD\",\n  \"doclinks\": [\n    {\n      \"urltype\": \"URL\",\n      \"doctype\": \"Attachments\",\n      \"title\": \"espn\",\n      \"newurlname\": \"www.espn.com\",\n      \"urlname\": \"www.espn.com\"\n    }\n  ]\n}\n```\n\nWe also support getting attachments inline as part of a json document. To do this just use the query parameter inlinedoc=1. An example shown below\n\n```\nGET /oslc/os/mxapiasset/{rest id}?inlinedoc=1\n```\n\n```json\n{\n  \"assetnum\": \"TEST299\",\n  \"siteid\": \"BEDFORD\",\n  \"doclinks\": [\n    {\n      \"urltype\": \"FILE\",\n      \"documentdata\": \"aGV5IGhvdyBhcmUgeW91\",\n      \"doctype\": \"Attachments\",\n      \"urlname\": \"greetingsabcd.txt\"\n    },\n    {\n      \"urltype\": \"FILE\",\n      \"documentdata\": \"aGV5IGhvdyBpcyB0aGF0\",\n      \"doctype\": \"Attachments\",\n      \"urlname\": \"howisthatfor.txt\"\n    }\n  ]\n}\n```","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/attachment/attachment.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
{"componentChunkName":"component---src-pages-workflow-workflow-mdx","path":"/workflow/workflow/","result":{"pageContext":{"frontmatter":{"title":"Interfacing with the Workflow Engine"},"relativePagePath":"/workflow/workflow.mdx","titleType":"append","MdxNode":{"id":"a0c9137f-532e-5166-9ae4-0e33a9b0bde7","children":[],"parent":"6d0b2f05-4102-5e4e-a62b-d2dbce0a6e67","internal":{"content":"---\ntitle: Interfacing with the Workflow Engine\n---\n\nInitiating a workflow for a given Mbo can be done by using the api shown below:\n\n```\nPOST /oslc/os/<os name>/{rest id}?action=workflow:<workflow name> \nx-method-override: PATCH\n```\n\nThis will invoke the named workflow in the context of the mbo identified in the URI.\n\n\n## Handling Task Nodes\n\nAfter initiation the workflow might end up into a task node, which generates an assignment. The apis below shows how you can handle assignments.\n\nThe first step would be for the user to fetch his/her assignments. For an user to fetch assignments use the api below\n\n```\nGET /oslc/os/mxapiwfassignment?oslc.select=*\n```\n\nThis will fetch all the assignments for that user. Each assignment will have a positive action and a negative action to take. \nThe sample json is shown below\n\n```json\n[\n  {\n    \"description\": \"mydesc\",\n    \"wfassignmentid\": \"myid\",\n    \"href\": \"http://myhref\",\n    \"wfaction\": [\n      {\n        \"instruction\": \"myinstruction1\",\n        \"ispositive\": false\n      },\n      {\n        \"instruction\": \"myinstruction2\",\n        \"ispositive\": true\n      }\n    ]\n  }\n  ...\n]\n```\n\nNote that the wfaction json contains the positive and negative actions. The user is supposed to take up one or the other.\n\nThe api call below shows how to take the positive action.\n\n```\nPOST /oslc/os/mxapiwfassignment/{id}?action=wsmethod:completeAssignment \nx-method-override: PATCH\n```\n\nBody:\n```json\n{\n  \"memo\": \"some memo\",\n  \"accepted\": true\n}\n```\n\nTo take up the negative route you can just set the accepted flag to false in the json and POST to the same href.\n\n\n## Handling Input Nodes\n\nInput nodes provide the user with interactive options to choose from in a workflow path. The user may not choose anything, in which case the workflow stays in that same state. If the workflow framework looks ahead and sees an input node as the next node, the rest api response for the current node (say that was a task assignment that the user accepted or rejected) will return\n\n1. A response json which will have the details of the options that the input node provides. The consuming client code is supposed to use those options to let the end user decide the option to chose.\n2. A response location header with the url to POST the users choice to.\n\nThe response json may look like this\n\n```json\n{\n  \"member\": [\n    {\n      \"actionid\": \"myactionid1\",\n      \"instruction\": \"myinstruction1\"\n    },\n    {\n      \"actionid\": \"myactionid2\",\n      \"instruction\": \"myinstruction2\"\n    }\n  ],\n  \"nodetype\": \"INPUT\",\n  \"internalnodetype\": \"WFINPUT\"\n}\n```\n\nNote that the input node type says that its `WFINPUT`. This information can be leveraged by the consuming code (say a mobile app) to display a generic UI to represent these options.\n\nThe api call below describes how to choose an option: \n\n```\nPOST <location uri>\n```\n\nBody:\n```json\n{\n  \"actionid\": \"choose one of the action id from the json above\",\n  \"memo\": \"some memo\"\n}\n```\nNote if this call is not made, the workflow stays with the current node (ie the node previous to the input node) and does not move to the next node. In essence the input node is a transient node which is only available for processing within that context of the previous node.\n\n\n## Handling Interaction Nodes\n\nInteraction nodes are Maximo UI dialogs and applications/tabs that are presented to the user for him/her to take an action using that UI artifact. Now unlike an input node this one is not a transient node. This implies that the workflow engine has moved to the this node from the previous node.\n\nWhen the workflow lands into this node, the response json from the previous call should indicate that details of the interaction node, presenting the information from the WFINTERACTION table for that node. This should help identify (using the json property `internalnodetype` with a value of WFINTERACTION ) the client code to provide an equivalent interface for the Maximo dialog/app for the user to act upon. Like the case with the input node, the rest framework will generate a URI (set the in the response location header) for the client code to respond back to the interaction such that the workflow instance can move to the next node in the path.\n\nNow if the user ignores this node the engine just moves on to the next node. But the engine needs to know that the interaction node job is complete one way or the other. To do that the end user in Maximo application will re-route the workflow by pressing the workflow route button. To simulate that in the api realm, the client code needs to make the api call shown below\n\n```\nPOST <location uri>\n```\n\nBody:\n```json\n{\n  \"interactioncomplete\": 1\n}\n```\n\nThis will indicate to the workflow engine that the interaction is complete.\n\n\n## Handling Wait Nodes\n\nWait nodes are listeners to the Mbo (that is being workflowed) event. Effectively the workflow waits on this event and when the event eventually happens, it moves to the next node. We do not need any special handling with apis for this node as this is backend event driven. So if an event comes from any api calls/ MIF call or UI call - for that mbo, the workflow will listen for that and if the condition is met, it will move to the next node in the path.\n\n\n## Handling Condition Nodes\n\nCondition nodes are automatically evaluated by the workflow engine and the engine will move to the next node in the path after condition evaluation.\n","type":"Mdx","contentDigest":"aa07d9e32307148a393c61872a76c65b","owner":"gatsby-plugin-mdx","counter":149},"frontmatter":{"title":"Interfacing with the Workflow Engine"},"exports":{},"rawBody":"---\ntitle: Interfacing with the Workflow Engine\n---\n\nInitiating a workflow for a given Mbo can be done by using the api shown below:\n\n```\nPOST /oslc/os/<os name>/{rest id}?action=workflow:<workflow name> \nx-method-override: PATCH\n```\n\nThis will invoke the named workflow in the context of the mbo identified in the URI.\n\n\n## Handling Task Nodes\n\nAfter initiation the workflow might end up into a task node, which generates an assignment. The apis below shows how you can handle assignments.\n\nThe first step would be for the user to fetch his/her assignments. For an user to fetch assignments use the api below\n\n```\nGET /oslc/os/mxapiwfassignment?oslc.select=*\n```\n\nThis will fetch all the assignments for that user. Each assignment will have a positive action and a negative action to take. \nThe sample json is shown below\n\n```json\n[\n  {\n    \"description\": \"mydesc\",\n    \"wfassignmentid\": \"myid\",\n    \"href\": \"http://myhref\",\n    \"wfaction\": [\n      {\n        \"instruction\": \"myinstruction1\",\n        \"ispositive\": false\n      },\n      {\n        \"instruction\": \"myinstruction2\",\n        \"ispositive\": true\n      }\n    ]\n  }\n  ...\n]\n```\n\nNote that the wfaction json contains the positive and negative actions. The user is supposed to take up one or the other.\n\nThe api call below shows how to take the positive action.\n\n```\nPOST /oslc/os/mxapiwfassignment/{id}?action=wsmethod:completeAssignment \nx-method-override: PATCH\n```\n\nBody:\n```json\n{\n  \"memo\": \"some memo\",\n  \"accepted\": true\n}\n```\n\nTo take up the negative route you can just set the accepted flag to false in the json and POST to the same href.\n\n\n## Handling Input Nodes\n\nInput nodes provide the user with interactive options to choose from in a workflow path. The user may not choose anything, in which case the workflow stays in that same state. If the workflow framework looks ahead and sees an input node as the next node, the rest api response for the current node (say that was a task assignment that the user accepted or rejected) will return\n\n1. A response json which will have the details of the options that the input node provides. The consuming client code is supposed to use those options to let the end user decide the option to chose.\n2. A response location header with the url to POST the users choice to.\n\nThe response json may look like this\n\n```json\n{\n  \"member\": [\n    {\n      \"actionid\": \"myactionid1\",\n      \"instruction\": \"myinstruction1\"\n    },\n    {\n      \"actionid\": \"myactionid2\",\n      \"instruction\": \"myinstruction2\"\n    }\n  ],\n  \"nodetype\": \"INPUT\",\n  \"internalnodetype\": \"WFINPUT\"\n}\n```\n\nNote that the input node type says that its `WFINPUT`. This information can be leveraged by the consuming code (say a mobile app) to display a generic UI to represent these options.\n\nThe api call below describes how to choose an option: \n\n```\nPOST <location uri>\n```\n\nBody:\n```json\n{\n  \"actionid\": \"choose one of the action id from the json above\",\n  \"memo\": \"some memo\"\n}\n```\nNote if this call is not made, the workflow stays with the current node (ie the node previous to the input node) and does not move to the next node. In essence the input node is a transient node which is only available for processing within that context of the previous node.\n\n\n## Handling Interaction Nodes\n\nInteraction nodes are Maximo UI dialogs and applications/tabs that are presented to the user for him/her to take an action using that UI artifact. Now unlike an input node this one is not a transient node. This implies that the workflow engine has moved to the this node from the previous node.\n\nWhen the workflow lands into this node, the response json from the previous call should indicate that details of the interaction node, presenting the information from the WFINTERACTION table for that node. This should help identify (using the json property `internalnodetype` with a value of WFINTERACTION ) the client code to provide an equivalent interface for the Maximo dialog/app for the user to act upon. Like the case with the input node, the rest framework will generate a URI (set the in the response location header) for the client code to respond back to the interaction such that the workflow instance can move to the next node in the path.\n\nNow if the user ignores this node the engine just moves on to the next node. But the engine needs to know that the interaction node job is complete one way or the other. To do that the end user in Maximo application will re-route the workflow by pressing the workflow route button. To simulate that in the api realm, the client code needs to make the api call shown below\n\n```\nPOST <location uri>\n```\n\nBody:\n```json\n{\n  \"interactioncomplete\": 1\n}\n```\n\nThis will indicate to the workflow engine that the interaction is complete.\n\n\n## Handling Wait Nodes\n\nWait nodes are listeners to the Mbo (that is being workflowed) event. Effectively the workflow waits on this event and when the event eventually happens, it moves to the next node. We do not need any special handling with apis for this node as this is backend event driven. So if an event comes from any api calls/ MIF call or UI call - for that mbo, the workflow will listen for that and if the condition is met, it will move to the next node in the path.\n\n\n## Handling Condition Nodes\n\nCondition nodes are automatically evaluated by the workflow engine and the engine will move to the next node in the path after condition evaluation.\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-restapi-documentation/src/pages/workflow/workflow.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
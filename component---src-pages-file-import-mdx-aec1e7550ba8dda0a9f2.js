"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[9975],{3624:function(e,t,a){a.d(t,{Z:function(){return y}});var n=a(7294),r=a(8650),l=a.n(r),i=a(1597),o=a(811),s=a(87),c=a(5900),u=a.n(c),d=function(e){var t,a=e.title,r=e.theme,l=e.tabs,i=void 0===l?[]:l;return n.createElement("div",{className:u()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=i.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===r,t))},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12"},n.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},p=function(e){var t=e.relativePagePath,a=e.repository,r=(0,i.useStaticQuery)("1364590287").site.siteMetadata.repository,l=a||r,o=l.baseUrl,s=l.subDirectory,c=o+"/edit/"+l.branch+s+"/src/pages"+t;return o?n.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},n.createElement("div",{className:"bx--col"},n.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},m=a(4703),h=a(1721),f=function(e){function t(){return e.apply(this,arguments)||this}return(0,h.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,r=e.slug,o=r.split("/").filter(Boolean).slice(-1)[0],s=a.map((function(e){var t,a=l()(e,{lower:!0,strict:!0}),s=a===o,c=new RegExp(o+"/?(#.*)?$"),d=r.replace(c,a);return n.createElement("li",{key:e,className:u()((t={},t["PageTabs-module--selected-item--aBB0K"]=s,t),"PageTabs-module--list-item--024o6")},n.createElement(i.Link,{className:"PageTabs-module--link--Kz-7R",to:""+d},e))}));return n.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},n.createElement("nav",{"aria-label":t},n.createElement("ul",{className:"PageTabs-module--list--xLqxG"},s))))))},t}(n.Component),g=f,E=a(7296),b=a(5387),k=a(3732),N=function(e){var t=e.date,a=new Date(t);return t?n.createElement(k.X2,{className:"last-modified-date-module--row--XJoYQ"},n.createElement(k.sg,null,n.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},y=function(e){var t=e.pageContext,a=e.children,r=e.location,c=e.Title,u=t.frontmatter,h=void 0===u?{}:u,f=t.relativePagePath,k=t.titleType,y=h.tabs,T=h.title,w=h.theme,v=h.description,A=h.keywords,P=h.date,M=(0,b.Z)().interiorTheme,x=(0,i.useStaticQuery)("2456312558").site.pathPrefix,S=x?r.pathname.replace(x,""):r.pathname,R=y?S.split("/").filter(Boolean).slice(-1)[0]||l()(y[0],{lower:!0}):"",I=w||M;return n.createElement(s.Z,{tabs:y,homepage:!1,theme:I,pageTitle:T,pageDescription:v,pageKeywords:A,titleType:k},n.createElement(d,{title:c?n.createElement(c,null):T,label:"label",tabs:y,theme:I}),y&&n.createElement(g,{title:T,slug:S,tabs:y,currentTab:R}),n.createElement(E.Z,{padded:!0},a,n.createElement(p,{relativePagePath:f}),n.createElement(N,{date:P})),n.createElement(m.Z,{pageContext:t,location:r,slug:S,tabs:y,currentTab:R}),n.createElement(o.Z,null))}},378:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return o},default:function(){return u}});var n=a(3366),r=(a(7294),a(4983)),l=a(3624),i=["components"],o={},s={_frontmatter:o},c=l.Z;function u(e){var t=e.components,a=(0,n.Z)(e,i);return(0,r.kt)(c,Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"you can upload data from flat files or XML or JSON files to Maximo Asset Management by using RESTful API ",(0,r.kt)("inlineCode",{parentName:"p"},"action=importfile")," by using the application import capability."),(0,r.kt)("h2",null,"Prepare Object Structure"),(0,r.kt)("p",null,"To import XML files, you do not need to configure the object structure. To import flat files, similar with the application import, you need to configure object structure to support the flat file structure. This implies there shouldn’t be any alias conflict for that specific object structure. To verify that, find the object structure, such as MXAPIMETER, in the Object Structure application. Make sure the Support Flat Structure check box is selected and no alias conflict is detected by the system (the Alias Conflict check box is clear). If there are any conflicting fields, select the Add/Modify Alias action and add a new alias to the conflicted field, starting with the first child object. The rest of this section focuses on flat files but XML files is the same with a different header value."),(0,r.kt)("h2",null,"Security"),(0,r.kt)("p",null,"There is no special requirement on security - it just follows the normal Object structure security concepts. This implies that you got to have support for INSERT/SAVE/DELETE sigoptions (for your corresponding security application for the object structure) to be able to import csv files."),(0,r.kt)("h2",null,"Prepare CSV"),(0,r.kt)("p",null,"The CSV format is the same as a typical application import in Maximo Asset Management. When you import files from CSV, the attribute name of each field must match with attribute alias in Maximo Asset Management."),(0,r.kt)("p",null,"For example, the CSV file content can be as follows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"METERNAME,METERTYPE,READINGTYPE,DESCRIPTION,MEASUREUNITID RUNHOURS2,CONTINUOUS,DELTA,Run Hours2,HOURS\nTEMP-F2,GAUGE,,Temperature in Fahrenheit2,DEG F\n")),(0,r.kt)("h2",null,"Preview"),(0,r.kt)("p",null,"Before processing the data into the database, you should validate if there any errors occured by using the preview functionality, which is supported in the import file API. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST oslc/os/mxapimeter?action=importfile&lean=1 \nmaxauth:<base64 encoded user:password>\npreview:1\n")),(0,r.kt)("p",null,"Body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"METERNAME,METERTYPE,READINGTYPE,DESCRIPTION,MEASUREUNITID RUNHOURS2,CONTINUOUS,DELTA,Run Hours2,HOURS\nTEMP-F2,GAUGE,,Temperature in Fahrenheit2,DEG F\n")),(0,r.kt)("p",null,"After you make the POST request to server, the system returns the preview response, which includes the validation information and warning messages and shown in the following error message example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "invaliddoc": 2,// how many invalid records \n  "totaldoc": 2,//how many records in csv file in total \n  "validdoc": 0,//how many valid records\n  "warningmsg": "\\nBMXAA5598E - Processing of an inbound transaction failed. The processing exception is identified in document 1.\\n\\tBMXAA0024E - The action ADD is not allowed on object METER. Verify the business rules for the object and define the appropriate action for the object.\\nBMXAA5598E - Processing of an inbound transaction failed. The processing exception is identified in document 2.\\n\\tBMXAA0024E - The action ADD is not allowed on object METER. Verify the business rules for the object and define the appropriate action for the object." //the error messages for each record.\n}\n')),(0,r.kt)("p",null,"You can determine the problem from warning messages and then fix it. In the sample error responses, you can tell that the issue is caused by missing the security setup. After granting the sigoptions and reprocess the call, the successful preview looks like following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "invaliddoc": 0,\n  "totaldoc": 2,\n  "validdoc": 2,\n  "warningmsg": ""\n}\n')),(0,r.kt)("h2",null,"File Import"),(0,r.kt)("p",null,"After previewing, you can import the file into Maximo Asset Management by removing preview header from request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST oslc/os/mxapimeter?action=importfile&lean=1\n")),(0,r.kt)("p",null,"Body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"METERNAME,METERTYPE,READINGTYPE,DESCRIPTION,MEASUREUNITID RUNHOURS2,CONTINUOUS,DELTA,Run Hours2,HOURS\nTEMP-F2,GAUGE,,Temperature in Fahrenheit2,DEG F\n")),(0,r.kt)("p",null,"The response is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "validdoc": 2\n}\n')),(0,r.kt)("p",null,"Other file types are supported, like XML/JSON, customized delimiter, and textqualifier. You can easily configure them with the following headers when you do the POST call."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Header"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filetype"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of the uploading file, it can be FLAT or XML"),(0,r.kt)("td",{parentName:"tr",align:null},"FLAT")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delimiter"),(0,r.kt)("td",{parentName:"tr",align:null},"The delimiter of csv file"),(0,r.kt)("td",{parentName:"tr",align:null},",")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"textqualifier"),(0,r.kt)("td",{parentName:"tr",align:null},"When the data include any delimiter, it will be wrapped by textqualifier"),(0,r.kt)("td",{parentName:"tr",align:null},"”")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"preview"),(0,r.kt)("td",{parentName:"tr",align:null},"If the importfile API is running in preview mode. It can be 0 or 1"),(0,r.kt)("td",{parentName:"tr",align:null},"0")))),(0,r.kt)("h3",null,"Asynchronous File import"),(0,r.kt)("p",null,"We can upload files asynchronously using the rest apis starting 7611. To do this just add the query parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"async=1")," and another query parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"name=<some unique name identifying the load>"),". The response would be a location url (in the response header) for the client program to poll to get status on the upload. The response of that polling is given in a json document that also indicates how many records have been processed so far which can be leveraged by the client program to show a progress indicator. At the end of the upload, the json document would contain the list of errors that it incurred as part of the upload and a embedded link to download the error file. The error file would be in the same format as the request upload file and will contain the error message along with the original data for each of the error records. Note that this error file only contains error records and not the ones that were processed successfully."),(0,r.kt)("p",null,"Internally Maximo has a crontask (API_FILE) that processes the upload at a configurable frequency. "))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-file-import-mdx-aec1e7550ba8dda0a9f2.js.map
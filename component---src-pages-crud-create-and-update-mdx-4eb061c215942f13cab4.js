"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[765],{3624:function(e,t,a){a.d(t,{Z:function(){return E}});var s=a(7294),n=a(8650),r=a.n(n),o=a(1597),l=a(811),i=a(87),c=a(5900),d=a.n(c),h=function(e){var t,a=e.title,n=e.theme,r=e.tabs,o=void 0===r?[]:r;return s.createElement("div",{className:d()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=o.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===n,t))},s.createElement("div",{className:"bx--grid"},s.createElement("div",{className:"bx--row"},s.createElement("div",{className:"bx--col-lg-12"},s.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},u=function(e){var t=e.relativePagePath,a=e.repository,n=(0,o.useStaticQuery)("1364590287").site.siteMetadata.repository,r=a||n,l=r.baseUrl,i=r.subDirectory,c=l+"/edit/"+r.branch+i+"/src/pages"+t;return l?s.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},s.createElement("div",{className:"bx--col"},s.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},p=a(4703),m=a(1721),f=function(e){function t(){return e.apply(this,arguments)||this}return(0,m.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,n=e.slug,l=n.split("/").filter(Boolean).slice(-1)[0],i=a.map((function(e){var t,a=r()(e,{lower:!0,strict:!0}),i=a===l,c=new RegExp(l+"/?(#.*)?$"),h=n.replace(c,a);return s.createElement("li",{key:e,className:d()((t={},t["PageTabs-module--selected-item--aBB0K"]=i,t),"PageTabs-module--list-item--024o6")},s.createElement(o.Link,{className:"PageTabs-module--link--Kz-7R",to:""+h},e))}));return s.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},s.createElement("div",{className:"bx--grid"},s.createElement("div",{className:"bx--row"},s.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},s.createElement("nav",{"aria-label":t},s.createElement("ul",{className:"PageTabs-module--list--xLqxG"},i))))))},t}(s.Component),w=f,g=a(7296),k=a(5387),y=a(3732),b=function(e){var t=e.date,a=new Date(t);return t?s.createElement(y.X2,{className:"last-modified-date-module--row--XJoYQ"},s.createElement(y.sg,null,s.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},E=function(e){var t=e.pageContext,a=e.children,n=e.location,c=e.Title,d=t.frontmatter,m=void 0===d?{}:d,f=t.relativePagePath,y=t.titleType,E=m.tabs,T=m.title,v=m.theme,x=m.description,N=m.keywords,P=m.date,S=(0,k.Z)().interiorTheme,j=(0,o.useStaticQuery)("2456312558").site.pathPrefix,R=j?n.pathname.replace(j,""):n.pathname,A=E?R.split("/").filter(Boolean).slice(-1)[0]||r()(E[0],{lower:!0}):"",C=v||S;return s.createElement(i.Z,{tabs:E,homepage:!1,theme:C,pageTitle:T,pageDescription:x,pageKeywords:N,titleType:y},s.createElement(h,{title:c?s.createElement(c,null):T,label:"label",tabs:E,theme:C}),E&&s.createElement(w,{title:T,slug:R,tabs:E,currentTab:A}),s.createElement(g.Z,{padded:!0},a,s.createElement(u,{relativePagePath:f}),s.createElement(b,{date:P})),s.createElement(p.Z,{pageContext:t,location:n,slug:R,tabs:E,currentTab:A}),s.createElement(l.Z,null))}},1221:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return i},default:function(){return u}});var s,n=a(3366),r=(a(7294),a(4983)),o=a(3624),l=["components"],i={},c=(s="InlineNotification",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),d={_frontmatter:i},h=o.Z;function u(e){var t=e.components,a=(0,n.Z)(e,l);return(0,r.kt)(h,Object.assign({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Create resources"),(0,r.kt)("p",null,"Creating resources are almost always done using the collection uri - the same uri you would use to query the resources. For example the api call for creating assets is shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /oslc/os/mxapiasset\n")),(0,r.kt)("p",null,"Post body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "assetnum": "ASSET1",\n  "siteid": "BEDFORD",\n  "description": "my first asset"\n}\n')),(0,r.kt)("p",null,"Once you create the asset, you will get a response that contains a location header with the URI of the newly created asset. You can now use that “location” uri to fetch the newly created resource. Rather than doing a GET to fetch the newly created resource, you may want the response of the create to contain your newly created resource. For that you can add the request header “properties”. The properties header follows the syntax of the ",(0,r.kt)("a",{parentName:"p",href:"../query/selecting"},"oslc.select")," clause. You can use that to fetch all properties, partial set of properties, related mbo attributes, formula properties etc (everything that you can do with the select clause)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'POST /oslc/os/mxapiasset \nproperties: *\n\n{\n  "assetnum": "ASSET1",\n  "siteid": "BEDFORD",\n  "description": "my first asset"\n}\n')),(0,r.kt)("p",null,"OR"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'POST /oslc/os/mxapiasset \nproperties: assetnum,status\n\n{\n  "assetnum": "ASSET1",\n  "siteid": "BEDFORD",\n  "description": "my first asset"\n}\n')),(0,r.kt)("p",null,"Using this properties header, we can remove to the need to do an extra GET for every create/update."),(0,r.kt)("h2",null,"Updating resources"),(0,r.kt)("p",null,"Now that we have created an asset, we will try to update it. For example, say we want to set a location and a description to the asset."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'POST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\nproperties:*\n\n{\n  "location": "BR300",\n  "description": "test asset desc"\n}\n')),(0,r.kt)("p",null,"Note that the url we have a “rest id..” at the end of the collection url. This URI is pointing to a member asset in the collection - hence the “rest id” token after the collection uri. "),(0,r.kt)(c,{kind:"info",mdxType:"InlineNotification"},"The rest id is not the unique id for the Mbo. It's a generated id for the Mbo that is created using the primary-key attribute values."),(0,r.kt)(c,{kind:"info",mdxType:"InlineNotification"},"x-method-override:PATCH instructs the server side to update the resource. As with create, you can specify the properties request header, to get back the results of an update. The sample here shows a value of *. We would generally recommend avoiding use of * (unless you really want all properties) and instead use the selected set of properties that you care about (works our better for performance)."),(0,r.kt)("p",null,"Note that we needed to fetch the uri of the mxapiasset reasource in order to update it. Fetching of that URI can be done in 2 ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We can get the uri as part of a GET collection query which will return all select members with their uris."),(0,r.kt)("li",{parentName:"ul"},"As part of the response “location” header when we create a resource.")),(0,r.kt)("p",null,"Although this is the prevalent design for uri interaction in REST paradigm, in some cases you may not have the uri and still need to update the asset based on other key information. We will discuss how to do that shortly."),(0,r.kt)("h2",null,"Add child objects"),(0,r.kt)("p",null,"Next let’s try to add some child objects to this. For this example, we will add assetmeters to the newly creates asset. The api below adds 2 assetmeters to an asset:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE \nproperties:*\n")),(0,r.kt)("p",null,"Post body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "test asset desc",\n  "assetmeter": [\n    {\n      "metername": "TEMP-F",\n      "linearassetid": 0\n    },\n    {\n      "metername": "ABC",\n      "linearassetid": 0\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Note that here we used an extra request header called patchtype with a value of MERGE. This instructs the server side to try to match the child objects - like assetmeter with the existing assetmters for this asset. If it finds a match, that assetmeter gets updates with the request assetmeter. If there is no match, it will create a new assetmeter. We call this the MERGE api."),(0,r.kt)("p",null,"Say the asset to be updated had 3 existing assetmeters, and the request contained 1 existing assetmeter and 1 new assetmeter. After the merge call, that asset will be having 4 assetmeters - with one newly created one and another updated assetmeter."),(0,r.kt)("p",null,"To highlight the difference between a PATCH and MERGE call, we can run the same request but without the patchtype header, on another similar asset with 3 assetmeters. The server side will create a new assetmeter and update the existing assetmeter just as in the MERGE call."),(0,r.kt)("p",null,"Unlike the MERGE call, it will end up deleting the assetmeters that were not in the request. In this example the asset with be left with only 2 assetmeters (that are in the request). Thus in PATCH request, the server side will delete all child objects that are not in the request payload."),(0,r.kt)("h2",null,"Updating child objects"),(0,r.kt)("p",null,"Now let’s talk about updating the child objects. In this example we will update the assetmeter object to set the meter reading. Make sure the MXAPIASSET Object structure has the np attributes “newreading” and “newreadingdate” included."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE \nproperties:*\n")),(0,r.kt)("p",null,"Post body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "test asset desc - updating temp meter",\n  "assetmeter": [\n    {\n      "metername": "TEMP-F",\n      "linearassetid": 0,\n      "newreading": "10"\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Notice that we included the primary keys of the assetmeter - metername and linearassetid for the meter update. Another option that the api allows is to use the href uri for the assetmeter instead of the primary keys. The sample below shows that."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},'POST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE \nproperties:*\n\n{\n  "description": "test asset desc - updating temp meter with child uri",\n  "assetmeter": [\n    {\n      "href": "parent uri#encoded_child_keys_anchored",\n      "newreading": "10"\n    }\n  ]\n}\n')),(0,r.kt)("h2",null,"Delete child objects"),(0,r.kt)("p",null,"If you are wondering how to selectively delete child object, the request below shows just that."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'POST /oslc/os/mxapiasset/{rest id for the asset} \nx-method-override: PATCH\npatchtype: MERGE\nproperties:*\n\n{\n  "assetmeter": [\n    {\n      "metername": "TEMP-F",\n      "linearassetid": 0,\n      "_action": "Delete"\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Note the use of child level actions (",(0,r.kt)("em",{parentName:"p"},"_action"),") to delete the assetmeter. You could have also used the child href instead of the primary keys as shown before. You could have also used the http DELETE method to delete the child object using the child object “localuri” URI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DELETE <assetmeter localuri>\n")),(0,r.kt)("p",null,"Note local uri for a child object (in Object Structure) is something you can use to refer directly to the child object. You cannot do the same with the child href as that is an anchored uri. For example you cannot use the child href for http DELETE."),(0,r.kt)(c,{kind:"info",mdxType:"InlineNotification"},"Using the POST method with the _action child action, you can do a bulk delete of child objects, which you cannot do using the http DELETE method."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-crud-create-and-update-mdx-4eb061c215942f13cab4.js.map
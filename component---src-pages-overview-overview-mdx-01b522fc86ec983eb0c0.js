"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[4937],{3624:function(e,t,a){a.d(t,{Z:function(){return E}});var r=a(7294),o=a(8650),s=a.n(o),i=a(1597),n=a(811),l=a(87),m=a(5900),u=a.n(m),c=function(e){var t,a=e.title,o=e.theme,s=e.tabs,i=void 0===s?[]:s;return r.createElement("div",{className:u()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=i.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===o,t))},r.createElement("div",{className:"bx--grid"},r.createElement("div",{className:"bx--row"},r.createElement("div",{className:"bx--col-lg-12"},r.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},h=function(e){var t=e.relativePagePath,a=e.repository,o=(0,i.useStaticQuery)("1364590287").site.siteMetadata.repository,s=a||o,n=s.baseUrl,l=s.subDirectory,m=n+"/edit/"+s.branch+l+"/src/pages"+t;return n?r.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},r.createElement("div",{className:"bx--col"},r.createElement("a",{className:"EditLink-module--link--IDrl1",href:m},"Edit this page on GitHub"))):null},d=a(4703),p=a(1721),f=function(e){function t(){return e.apply(this,arguments)||this}return(0,p.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,o=e.slug,n=o.split("/").filter(Boolean).slice(-1)[0],l=a.map((function(e){var t,a=s()(e,{lower:!0,strict:!0}),l=a===n,m=new RegExp(n+"/?(#.*)?$"),c=o.replace(m,a);return r.createElement("li",{key:e,className:u()((t={},t["PageTabs-module--selected-item--aBB0K"]=l,t),"PageTabs-module--list-item--024o6")},r.createElement(i.Link,{className:"PageTabs-module--link--Kz-7R",to:""+c},e))}));return r.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},r.createElement("div",{className:"bx--grid"},r.createElement("div",{className:"bx--row"},r.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},r.createElement("nav",{"aria-label":t},r.createElement("ul",{className:"PageTabs-module--list--xLqxG"},l))))))},t}(r.Component),g=f,b=a(7296),w=a(5387),v=a(3732),y=function(e){var t=e.date,a=new Date(t);return t?r.createElement(v.X2,{className:"last-modified-date-module--row--XJoYQ"},r.createElement(v.sg,null,r.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},E=function(e){var t=e.pageContext,a=e.children,o=e.location,m=e.Title,u=t.frontmatter,p=void 0===u?{}:u,f=t.relativePagePath,v=t.titleType,E=p.tabs,k=p.title,x=p.theme,N=p.description,T=p.keywords,S=p.date,P=(0,w.Z)().interiorTheme,M=(0,i.useStaticQuery)("2456312558").site.pathPrefix,R=M?o.pathname.replace(M,""):o.pathname,j=E?R.split("/").filter(Boolean).slice(-1)[0]||s()(E[0],{lower:!0}):"",q=x||P;return r.createElement(l.Z,{tabs:E,homepage:!1,theme:q,pageTitle:k,pageDescription:N,pageKeywords:T,titleType:v},r.createElement(c,{title:m?r.createElement(m,null):k,label:"label",tabs:E,theme:q}),E&&r.createElement(g,{title:k,slug:R,tabs:E,currentTab:j}),r.createElement(b.Z,{padded:!0},a,r.createElement(h,{relativePagePath:f}),r.createElement(y,{date:S})),r.createElement(d.Z,{pageContext:t,location:o,slug:R,tabs:E,currentTab:j}),r.createElement(n.Z,null))}},4596:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return n},default:function(){return u}});var r=a(3366),o=(a(7294),a(4983)),s=a(3624),i=["components"],n={},l={_frontmatter:n},m=s.Z;function u(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)(m,Object.assign({},l,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Maximo NextGen REST APIs are a complete rewrite of the existing REST apis that was released around Maximo version 7.1. Maximo NextGen REST apis are in Maximo releases starting 7602 version. The NextGen apis are often referred to as the REST/JSON apis for the end to end support for JSON data format. There are numerous benefits of using the nextgen apis with a few highlighted here:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Significantly enhanced support for querying maximo data - subselects, related object queries, multi-attribute text search, custom queries (java/scripting)."),(0,o.kt)("li",{parentName:"ul"},"Support for system level actions - bookmarking, notifications, e-sig, image association etc."),(0,o.kt)("li",{parentName:"ul"},"Tight integration to automation scripts - query, actions, custom apis."),(0,o.kt)("li",{parentName:"ul"},"Enhanced REST support for MIF Standard Services - support json data type for those service methods."),(0,o.kt)("li",{parentName:"ul"},"Metadata support using json schema."),(0,o.kt)("li",{parentName:"ul"},"Supports dynamic query views."),(0,o.kt)("li",{parentName:"ul"},"Support for group by queries."),(0,o.kt)("li",{parentName:"ul"},"Supports custom json elements appended to the Object structure JSON."),(0,o.kt)("li",{parentName:"ul"},"Integration with Maximo Cache framework."),(0,o.kt)("li",{parentName:"ul"},"Integration with Maximo formulas."),(0,o.kt)("li",{parentName:"ul"},"Integration with Maximo Federated Mbos/Resources.")),(0,o.kt)("p",null,"This api uses the same code base as the OSLC REST apis (which is used by the Anywhere platform) but is much simpler to setup (no need to setup OSLC resources) and sheds the namespaced json that the OSLC api required. Effectively this api is ready to be used when a vanilla Maximo is installed and setup with users and groups - with no additional setup."),(0,o.kt)("p",null,"Let’s start with a high level overview of the architecture. As you can see, the REST api call flows through the authentication phase, api routes, authorization and then it interacts the with the Maximo artifacts like Mbo’s, Workflows, Automation Scripts etc. API routes are RESTlets (REST handlers) that provide the APIs for interfacing with various Maximo artifacts like - Maximo Business Objects, Automation scripts, Images, Permissions, Schemas etc. This is more for the developers of the API to organically expand the footprint of the REST apis to cover more and more parts of Maximo. We do not see any need for users of the of API to leverage this functionality yet. We expect more routes to get added as we expand the APIs over the next few releases."),(0,o.kt)("p",null,"Note: It’s recommended that you try out the apis, as you walk through this document. You can may want to install the “json viewer” plugin for FF or Chrome which will make easier to view the json documents from the api response. You may want to use a tool like Chrome Postman to make the POST calls with the api."),(0,o.kt)("p",null,"This document also assumes that you would use the lean json format (json with no namespace). This can be achieved by setting the lean=1 query parameter at login time. Note that it is recommended that you have the lean=1 query parameter set for all requests as it is possible the request might move to another server as part of load balancing or if the original server fails over to a new server. For brevity this query parameter will be ommited in most of the samples show below, but it is recommended that you add that while making the requests."),(0,o.kt)("p",null,"This document also assumes some familiarity with Maximo Object Structures which form the resources for this REST api. A quick starter for the API demo can be viewed here ",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=zD6RRjjwJlo"},"REST API: Getting started")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-overview-mdx-01b522fc86ec983eb0c0.js.map
"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[4688],{3624:function(e,t,a){a.d(t,{Z:function(){return N}});var n=a(7294),l=a(8650),o=a.n(l),r=a(1597),i=a(811),s=a(87),d=a(5900),p=a.n(d),c=function(e){var t,a=e.title,l=e.theme,o=e.tabs,r=void 0===o?[]:o;return n.createElement("div",{className:p()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=r.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===l,t))},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12"},n.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},m=function(e){var t=e.relativePagePath,a=e.repository,l=(0,r.useStaticQuery)("1364590287").site.siteMetadata.repository,o=a||l,i=o.baseUrl,s=o.subDirectory,d=i+"/edit/"+o.branch+s+"/src/pages"+t;return i?n.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},n.createElement("div",{className:"bx--col"},n.createElement("a",{className:"EditLink-module--link--IDrl1",href:d},"Edit this page on GitHub"))):null},h=a(4703),u=a(1721),g=function(e){function t(){return e.apply(this,arguments)||this}return(0,u.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,l=e.slug,i=l.split("/").filter(Boolean).slice(-1)[0],s=a.map((function(e){var t,a=o()(e,{lower:!0,strict:!0}),s=a===i,d=new RegExp(i+"/?(#.*)?$"),c=l.replace(d,a);return n.createElement("li",{key:e,className:p()((t={},t["PageTabs-module--selected-item--aBB0K"]=s,t),"PageTabs-module--list-item--024o6")},n.createElement(r.Link,{className:"PageTabs-module--link--Kz-7R",to:""+c},e))}));return n.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},n.createElement("nav",{"aria-label":t},n.createElement("ul",{className:"PageTabs-module--list--xLqxG"},s))))))},t}(n.Component),k=g,f=a(7296),b=a(5387),w=a(3732),T=function(e){var t=e.date,a=new Date(t);return t?n.createElement(w.X2,{className:"last-modified-date-module--row--XJoYQ"},n.createElement(w.sg,null,n.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},N=function(e){var t=e.pageContext,a=e.children,l=e.location,d=e.Title,p=t.frontmatter,u=void 0===p?{}:p,g=t.relativePagePath,w=t.titleType,N=u.tabs,y=u.title,v=u.theme,E=u.description,x=u.keywords,P=u.date,D=(0,b.Z)().interiorTheme,M=(0,r.useStaticQuery)("2456312558").site.pathPrefix,S=M?l.pathname.replace(M,""):l.pathname,j=N?S.split("/").filter(Boolean).slice(-1)[0]||o()(N[0],{lower:!0}):"",C=v||D;return n.createElement(s.Z,{tabs:N,homepage:!1,theme:C,pageTitle:y,pageDescription:E,pageKeywords:x,titleType:w},n.createElement(c,{title:d?n.createElement(d,null):y,label:"label",tabs:N,theme:C}),N&&n.createElement(k,{title:y,slug:S,tabs:N,currentTab:j}),n.createElement(f.Z,{padded:!0},a,n.createElement(m,{relativePagePath:g}),n.createElement(T,{date:P})),n.createElement(h.Z,{pageContext:t,location:l,slug:S,tabs:N,currentTab:j}),n.createElement(i.Z,null))}},1944:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return i},default:function(){return p}});var n=a(3366),l=(a(7294),a(4983)),o=a(3624),r=["components"],i={},s={_frontmatter:i},d=o.Z;function p(e){var t=e.components,a=(0,n.Z)(e,r);return(0,l.kt)(d,Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Migration manager apis (part of 7613 and 8.x) helps move migration packages from a source maximo to target maximo. To facilitate this we have opened up set of rest apis as described below. Note that these apis are designed to handle MM Changes and Snapshot and not migration collections at this point. Also note that these apis are not designed to define a package – which should be done by the customer SME as part of MM setup. The apis are listed below"),(0,l.kt)("h2",null,"Create a MM package from a package definition"),(0,l.kt)("p",null,"This is used to create a package from a package definition. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /dm/create\nApikey:<apikey value>\n")),(0,l.kt)("p",null,"With the post body as below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pkgdefname": "TESTDD",\n  "readme": "moving scripts"\n}\n')),(0,l.kt)("p",null,"The response will have the newly created package json with the dmpackageid – which should be used in the next call ",(0,l.kt)("inlineCode",{parentName:"p"},"/dm/distribute")),(0,l.kt)("p",null,"The response json will be a representation of the newly created dmpackage – shown below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dmpackageid": 123,\n  "source": "the source env identifier",\n  "status": "the status of the package – created/deployed etc – look for the internal value",\n  "filename": " the name of the file when we download this package",\n  "readme": "the memo for the created package",\n  "createdate": "the creation timestamp",\n  "createby": " the user id that created this package",\n  "pkgdefname": " the package definition name",\n  "progressstatus": ".."\n}\n')),(0,l.kt)("h2",null,"Distribute the newly created MM Package"),(0,l.kt)("p",null,"This call is used to distribute the package created in the previous step. Distribution is done to a target that is predefined. Targets can be file targets of database targets. In this api, you can choose the target to deploy this package or let the framework choose all possible targets. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /dm/distribute\n")),(0,l.kt)("p",null,"With the post body as below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n     "pkgdefname":"TESTDD",\n     "dmpackageid":31,\n     "targetname": "mytarget"\n}\n')),(0,l.kt)("p",null,"Note that the “targetname” property is optional and if not provided, will end up distributing this package to all available targets as defined for this package definition.\nThe response is the same as the create api ie it’s the representation of modified DMPACKAGE object after the distribution is done. This json representation will also have an additional element “distributionmessage” which is the message that the MM framework generates after a successful distribution."),(0,l.kt)("h2",null,"Downloading the package"),(0,l.kt)("p",null,"Once the package is distributed to the target folder, we will need to download the package for uploading it to the target environment. Note that this step is not needed if the target is the target Maximo’s database. In that case, the download and upload steps should be skipped. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /dm/download?dmpackagedef=TESTDD&dmpackageid=31\n")),(0,l.kt)("p",null,"This responds with the package zip. The client code can then upload this zip file to the target Maximo using the next api."),(0,l.kt)("h2",null,"Uploading the zipped package"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST <target Maximo api url>/dm/upload?filename=<the downloaded package zip file name>\n<<the zipped package>>\n")),(0,l.kt)("p",null,"This uploads the package to the target Maximo."),(0,l.kt)("h2",null,"Deploy the package in the target Maximo"),(0,l.kt)("p",null,"Next step would be to deploy the uploaded package. Note that we can simply jump to this step if we distributed the package to the target Maximo db in the “distribute” step. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /dm/deploy\n")),(0,l.kt)("p",null,"The successful response would be a json object with a property called “warningmsg” that will have the combined status message as displayed in the classic Maximo UI after a deployment. An error response can also arise for the reasons below:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"If there is a issue with the package data that fails the target system validation."),(0,l.kt)("li",{parentName:"ol"},"There is a need for admin mode to be turned on for this deployment.")),(0,l.kt)("p",null,"For both cases the api response would be an error object. For #1, there is no option but to fix the data and recreate the package. But in case of admin mode error (#2), the client should be able to identify the error code (BMXAA0578E) and make the needed calls to setup the admin mode and then call the ",(0,l.kt)("inlineCode",{parentName:"p"},"/dm/completedeploy")," api and then turn the admin mode off. We will cover those apis below. Note that for #2, the error json will contain the dmpackageid for the failed package. "),(0,l.kt)("p",null,"Below is a sample error json"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Error":{\n    "errorattrname": "dmpackageid",\n    "extendedError":{\n        "moreInfo":{\n            "href": "http://localhost:7001/maximo/oslc/error/messages/BMXAA0578E"\n        }\n    },\n    "errattrvalue": "31",\n    "reasonCode": "BMXAA0578E",\n    "message": "…..",\n    "statusCode": "400"\n    }\n}\n')),(0,l.kt)("h2",null,"Turning the admin mode on"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /adminmode/on\n")),(0,l.kt)("p",null,"With the post body as below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "numsessions": 5,\n  "logoutmin": 1\n}\n')),(0,l.kt)("p",null,"The response should be a 200 OK."),(0,l.kt)("h2",null,"Checking the state of the admin mode"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /adminmode/state\n")),(0,l.kt)("p",null,"This will return a json containing the state value of 0,1,2. The client code should be looking for a value of 1 – which implies that the admin mode is on. The value of 2 would indicate that its still pending. "),(0,l.kt)("h2",null,"Completing the deployment"),(0,l.kt)("p",null,"This api would be called in to complete the deployment that got interrupted due to admin mode requirement. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /dm/completedeploy\n")),(0,l.kt)("p",null,"With the post body as below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pkgdefname": "TESTDD",\n  "dmpackageid": <the id returned as part of the error response>\n}\n')),(0,l.kt)("h2",null,"Turning the admin mode off"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /adminmode/off\n")),(0,l.kt)("p",null,"Turns the admin mode off. The client should do this after the package deployment is complete. "),(0,l.kt)("h2",null,"Reset the event tracking history for Change"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /dm/reset\n")),(0,l.kt)("p",null,"With the post body as below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pkgdefname": "TESTDD"\n}\n')),(0,l.kt)("p",null,"This is a design choice meant to not repeat the same events after they have been migrated."),(0,l.kt)("h2",null,"Toggle the active flag for Change"),(0,l.kt)("p",null,"Once a CHANGE package is created and distributed, the event listener gets de-activated. This api is used to reactive that."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /dm/toggleactive\n")),(0,l.kt)("p",null,"With the post body as below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pkgdefname": "TESTDD"\n}\n')),(0,l.kt)("h2",null,"Close the package"),(0,l.kt)("p",null,"Used for cleanup – after the package content has been donloaded."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /dm/close\n")),(0,l.kt)("p",null,"With the post body as below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pkgdefname": "TESTDD",\n  "dmpackageid": 123\n}\n')),(0,l.kt)("p",null,"Response will the json representation of the DMPACKAGE that got closed."),(0,l.kt)("h2",null,"Delete the package"),(0,l.kt)("p",null,"Used for cleanup – after the package content has been downloaded."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /dm/delete\n")),(0,l.kt)("p",null,"With the post body as below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pkgdefname": "TESTDD",\n  "dmpackageid": 123\n}\n')))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-migrationmanager-api-mdx-6bc181cf46b5c64af199.js.map
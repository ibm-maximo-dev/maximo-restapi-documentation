"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[5481],{3624:function(e,t,a){a.d(t,{Z:function(){return T}});var o=a(7294),n=a(8650),s=a.n(n),l=a(1597),i=a(811),r=a(87),c=a(5900),p=a.n(c),m=function(e){var t,a=e.title,n=e.theme,s=e.tabs,l=void 0===s?[]:s;return o.createElement("div",{className:p()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=l.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===n,t))},o.createElement("div",{className:"bx--grid"},o.createElement("div",{className:"bx--row"},o.createElement("div",{className:"bx--col-lg-12"},o.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},h=function(e){var t=e.relativePagePath,a=e.repository,n=(0,l.useStaticQuery)("1364590287").site.siteMetadata.repository,s=a||n,i=s.baseUrl,r=s.subDirectory,c=i+"/edit/"+s.branch+r+"/src/pages"+t;return i?o.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},o.createElement("div",{className:"bx--col"},o.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},u=a(4703),d=a(1721),w=function(e){function t(){return e.apply(this,arguments)||this}return(0,d.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,n=e.slug,i=n.split("/").filter(Boolean).slice(-1)[0],r=a.map((function(e){var t,a=s()(e,{lower:!0,strict:!0}),r=a===i,c=new RegExp(i+"/?(#.*)?$"),m=n.replace(c,a);return o.createElement("li",{key:e,className:p()((t={},t["PageTabs-module--selected-item--aBB0K"]=r,t),"PageTabs-module--list-item--024o6")},o.createElement(l.Link,{className:"PageTabs-module--link--Kz-7R",to:""+m},e))}));return o.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},o.createElement("div",{className:"bx--grid"},o.createElement("div",{className:"bx--row"},o.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},o.createElement("nav",{"aria-label":t},o.createElement("ul",{className:"PageTabs-module--list--xLqxG"},r))))))},t}(o.Component),g=w,f=a(7296),k=a(5387),b=a(3732),x=function(e){var t=e.date,a=new Date(t);return t?o.createElement(b.X2,{className:"last-modified-date-module--row--XJoYQ"},o.createElement(b.sg,null,o.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},T=function(e){var t=e.pageContext,a=e.children,n=e.location,c=e.Title,p=t.frontmatter,d=void 0===p?{}:p,w=t.relativePagePath,b=t.titleType,T=d.tabs,y=d.title,N=d.theme,v=d.description,_=d.keywords,E=d.date,S=(0,k.Z)().interiorTheme,A=(0,l.useStaticQuery)("2456312558").site.pathPrefix,R=A?n.pathname.replace(A,""):n.pathname,j=T?R.split("/").filter(Boolean).slice(-1)[0]||s()(T[0],{lower:!0}):"",M=N||S;return o.createElement(r.Z,{tabs:T,homepage:!1,theme:M,pageTitle:y,pageDescription:v,pageKeywords:_,titleType:b},o.createElement(m,{title:c?o.createElement(c,null):y,label:"label",tabs:T,theme:M}),T&&o.createElement(g,{title:y,slug:R,tabs:T,currentTab:j}),o.createElement(f.Z,{padded:!0},a,o.createElement(h,{relativePagePath:w}),o.createElement(x,{date:E})),o.createElement(u.Z,{pageContext:t,location:n,slug:R,tabs:T,currentTab:j}),o.createElement(i.Z,null))}},9126:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return i},default:function(){return p}});var o=a(3366),n=(a(7294),a(4983)),s=a(3624),l=["components"],i={},r={_frontmatter:i},c=s.Z;function p(e){var t=e.components,a=(0,o.Z)(e,l);return(0,n.kt)(c,Object.assign({},r,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",null,"Overview"),(0,n.kt)("p",null,"Let’s start driving into the query aspect of this rest api. A few important aspects were considered while designing this api framework."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Being able to filter and sort Maximo business objects (mbo) using a higher level query language which internally will map to the native sql for the corresponding relation db used by Maximo deployment."),(0,n.kt)("li",{parentName:"ul"},"Being able to select the list of attributes that we want the api to fetch."),(0,n.kt)("li",{parentName:"ul"},"Being able to fetch data from related objects leveraging existing Maximo relationships without needing any additional configuration."),(0,n.kt)("li",{parentName:"ul"},"Being able to page data as needed.")),(0,n.kt)("p",null,"With these basic requirements in mind, we can now talk about some of the query parameters that are used for facilitating these. Q"),(0,n.kt)("p",null,"Query API is always based on a collection uri. All collection uri’s (for any resources that are api enabled) support a known set of URI query parameters that help us operate on the collection. The 4 most common ones are listed below. There are many\nmore and we will explore them as we go."),(0,n.kt)("h4",null,"Selecting - oslc.select"),(0,n.kt)("p",null,"This is used to specify the set of attributes to fetch from the Object structures as well as the related objects."),(0,n.kt)("h4",null,"Filtering - oslc.where"),(0,n.kt)("p",null,"This is used to specify the where clause which follows the syntax detailed in the next section (Where clause syntax)."),(0,n.kt)("h4",null,"Sorting - oslc.orderBy"),(0,n.kt)("p",null,"This is used to specify the order by clause."),(0,n.kt)("h4",null,"Paging - oslc.pageSize"),(0,n.kt)("p",null,"This is used to specify the page size for the"),(0,n.kt)("h1",null,"Querying data - Mbo and relationship"),(0,n.kt)("h2",null,"Selecting - oslc.select"),(0,n.kt)("p",null,"A sample select clause might be help understand it better. Below is a simple select clause from the MXAPIASSET object structure.\n",(0,n.kt)("inlineCode",{parentName:"p"},"oslc.select=assetnum,location,description,status")),(0,n.kt)("p",null,"GET /oslc/os/mxapiasset?oslc.pageSize=10&lean=1"),(0,n.kt)("p",null,"The response (collection resource) looks like below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "member": [\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-"\n    },\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--"\n    },\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_MTE0MDAvQkVERk9SRA--"\n    },\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_NjAxOTk1L0ZMRUVU"\n    },\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_NzM0NDQ0L0ZMRUVU"\n    },\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_NjEwMDMvQkVERk9SRA--"\n    },\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_MjYyMDAvQkVERk9SRA--"\n    },\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_MTAwNC9CRURGT1JE"\n    },\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_MTAwNS9CRURGT1JE"\n    },\n    {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_MTAwNi9CRURGT1JE"\n    }\n  ],\n  "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset",\n  "responseInfo": {\n    "nextPage": {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?pageno=2&_lid=wilson&lean=1&oslc.pageSize=10&_lpwd=wilson"\n    },\n    "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?oslc.pageSize=10&lean=1&_lid=wilson&_lpwd=wilson",\n    "pagenum": 1\n  }\n}\n')),(0,n.kt)("p",null,"This will result in fetching the 10 members (max) of the MXAPIASSET resource (which is based on the ASSET Mbo in Maximo) - each member pointing to an asset record with a “href” that contains the link to get the details for that ASSET. Any collection resource in this REST api will follow this same basic structure."),(0,n.kt)("p",null,"Note that the result is boxed under the member json array. Other than the “member” property there is another property called “responseInfo” which contains the meta information about the query. The meta information includes the current uri used to get the result (",(0,n.kt)("em",{parentName:"p"},"href"),") as well the url for the next page (",(0,n.kt)("em",{parentName:"p"},"nextPage"),") if there is a next page. It will also contain the url for the previous page (",(0,n.kt)("em",{parentName:"p"},"previousPage"),") if there is a previous page. This will also contain the current page number (",(0,n.kt)("em",{parentName:"p"},"pagenum"),") and total database count (",(0,n.kt)("em",{parentName:"p"},"totalCount"),") of the rows that meet the query filter criterion as well as the total number of pages (",(0,n.kt)("em",{parentName:"p"},"totalPages"),") available for this query. The totalCount and totalPages are not displayed by default and will be added only when we add the query parameter/value “collectioncount=1” to the request. If you are just interested in getting the total count of records that match the query and not interested in the records itself, you can just simply use the request query parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"count=1"),". This will result in the following json."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "totalCount": 10\n}\n')),(0,n.kt)("p",null,"There is a system property called ",(0,n.kt)("em",{parentName:"p"},"mxe.oslc.collectioncount")," which if set to 1 will always return the totalCount and totalPages by default as part of the responseInfo. However we recommend not to set that property as there will be cases where you may not need those values and will unnecessarily incur the cost of getting those values (which needs an additional sql call to get total count). It’s preferred to just request them using the query parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"collectioncount=1")," as needed."),(0,n.kt)("p",null,"Just getting the links to the member resources maynot be very exciting or useful. Rather than getting details by traversing individual URI’s, we would leverage the oslc.select clause to get more details inlined in this response json."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET  /oslc/os/mxapiasset?oslc.pageSize=2&oslc.select=assetnum,location,description,status&lean=1\n")),(0,n.kt)("p",null,"The resulting json will look like"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "member": [\n    {\n      "assetmeter_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/int_assetmeter",\n      "status_description": "Not Ready",\n      "ahrrplan_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/ahrrplan",\n      "description": "Highway Tractor, Class 8 Truck, Cummins M11 , Spic",\n      "moddowntimehist_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/moddowntimehist",\n      "downtimereport_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/downtimereport",\n      "_rowstamp": "36654",\n      "ahflag_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/ahflag",\n      "assetnum": "A6002",\n      "location": "DALTERM",\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-",\n      "assetspec_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/assetspecclass",\n      "serviceaddress_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/serviceaddress",\n      "status": "NOT READY"\n    },\n    {\n      "assetmeter_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--\\/int_assetmeter",\n      "status_description": "Not Ready",\n      "ahrrplan_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--\\/ahrrplan",\n      "description": "STAMPING MACH ",\n      "moddowntimehist_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--\\/moddowntimehist",\n      "downtimereport_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--\\/downtimereport",\n      "_rowstamp": "36655",\n      "ahflag_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--\\/ahflag",\n      "assetnum": "L12510",\n      "location": "SHIPPING",\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--",\n      "assetspec_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--\\/assetspecclass",\n      "serviceaddress_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--\\/serviceaddress",\n      "status": "NOT READY"\n    }\n  ],\n  "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset",\n  "responseInfo": {\n    "nextPage": {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?pageno=2&oslc.select=assetnum%2Clocation%2Cdescription%2Cstatus&lean=1&oslc.pageSize=2"\n    },\n    "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?oslc.pageSize=10&lean=1&oslc.select=assetnum,location,description,status",\n    "pagenum": 1\n  }\n}\n')),(0,n.kt)("p",null,"This will result in a json that contains the 4 attributes as requested for each of the members. Note that by default the api response skips the null value attributes. So for example if location is null for any of the member assets in the selection, that attribute will not appear in the member json. This helps reduce the response payload size. To force the response to add null value attributes, use the query parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"_dropnulls=0"),"."),(0,n.kt)("p",null,"Note that along with the “status” you will also have the “status_description” property which contains the synonymdomain description for that corresponding status value based on the users profile language. The api framework will detect a domain bound attribute (from the Maximo metadata repository) and will use the domain cache to fetch the description for that status."),(0,n.kt)("p",null,"You will also see the ",(0,n.kt)("em",{parentName:"p"},"_rowstamp")," property which would be present for every object in the Object Structure for a given resource record. This is used for handling dirty updates. We will cover this in the create/update of resources section."),(0,n.kt)("p",null,"You will also see the ",(0,n.kt)("em",{parentName:"p"},"xxxx_collectionref")," properties which contain the links to child objects as defined in the MXAPIASSET Object Structure. The prefix (xxxx) is the name of the child object. As you traverse through those links (ie GET ",(0,n.kt)("em",{parentName:"p"},"collectionref")," link), you will see the collection of the child objects. We can traverse through that collection resource just like any other collection ie we can page through them (using oslc.pageSize) or filter them (using oslc.where) or get partial views (using oslc.select) etc."),(0,n.kt)("p",null,"Say if we wanted to get some data from the assetmeter objectwhere assetmeter is a child object as defined in the Object Structure MXAPIASSET. To do this we can leverage the following select clause"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET  /oslc/os/mxapiasset?oslc.pageSize=2&oslc.select=assetnum,status,description,location,assetmeter{*}&lean=1\n")),(0,n.kt)("p",null,"The member json will look like"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "member": [\n    {\n      "assetmeter_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/int_assetmeter",\n      "status_description": "Not Ready",\n      "description": "Highway Tractor, Class 8 Truck, Cummins M11 , Spic",\n      "assetmeter": [\n        {\n          "rolldownsource_description": "Accept Asset rolldown.",\n          "localref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/int_assetmeter\\/0-7",\n          "linearassetmeterid": 0,\n          "sinceinstall": 0.0,\n          "newreading": "",\n          "sincelastinspect": 0.0,\n          "_rowstamp": "39508",\n          "isdelta": false,\n          "rollover": 100000.0,\n          "href": "http:\\/\\/childkey#QVNTRVQvQVNTRVRNRVRFUi9BNjAwMi8wL09ET00tTS9GTEVFVA--",\n          "readingtype_description": "Cumulative usage",\n          "avgcalcmethod": "SLIDING-DAYS",\n          "measurement_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/int_assetmeter\\/0-7\\/measurement",\n          "changeby": "WILSON",\n          "active": true,\n          "changedate": "2005-01-30T12:34:01-05:00",\n          "avgcalcmethod_description": "Readings from last n days",\n          "orgid": "EAGLENA",\n          "sincelastrepair": 0.0,\n          "assetmeterid": 7,\n          "meterreading_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-\\/int_assetmeter\\/0-7\\/meterreading",\n          "lifetodate": 0.0,\n          "measureunitid": "MILES",\n          "metername": "ODOM-M",\n          "sincelastoverhaul": 0.0,\n          "dorollover": false,\n          "readingtype": "ACTUAL",\n          "rolldownsource": "ASSET",\n          "slidingwindowsize": 10\n        }\n      ],\n      "_rowstamp": "36654",\n      "assetnum": "A6002",\n      "location": "DALTERM",\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-",\n      "status": "NOT READY"\n    },\n    {\n      "assetmeter_collectionref": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--\\/int_assetmeter",\n      "status_description": "Not Ready",\n      "description": "STAMPING MACH ",\n      "_rowstamp": "36655",\n      "assetnum": "L12510",\n      "location": "SHIPPING",\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--",\n      "status": "NOT READY"\n    }\n  ],\n  "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset",\n  "responseInfo": {\n    "nextPage": {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?pageno=2&oslc.select=assetnum%2Clocation%2Cdescription%2Cstatus%2Cassetmeter%7B*%7D&lean=1&oslc.pageSize=2"\n    },\n    "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?oslc.pageSize=10&lean=1&oslc.select=assetnum,location,description,status,assetmeter{*}",\n    "pagenum": 1\n  }\n}\n')),(0,n.kt)("p",null,"As you can figure out, to get the child object details we are using the notation - ",(0,n.kt)("inlineCode",{parentName:"p"},"<child object name>{comma separated attribute names or * to get all properties}"),". So assetmeter{*} is going to fetch all properties for the assetmeter. This notation can easily be nested any levels deep. For example you can do ",(0,n.kt)("inlineCode",{parentName:"p"},"obj1{prop1,prop2,obj2{prop21,prop22}}")," - where obj2 is defined as a child object of obj1."),(0,n.kt)("p",null,"While this notation works for child objects, you often will need to get more data from a related objects (say locations or workorders) which is not defined in the Object structure. The notation below will help us do this."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset?oslc.pageSize=2&oslc.select=assetnum,status,description,location,location.description,location.status&lean=1\n")),(0,n.kt)("p",null,"This will result in a member json like."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "member": [\n    {\n      "status_description": "Not Ready",\n      "description": "Highway Tractor, Class 8 Truck, Cummins M11 , Spic",\n      "_rowstamp": "36654",\n      "assetnum": "A6002",\n      "$alias_this_attr$location": "DALTERM",\n      "location": {\n        "status_description": "Operating",\n        "description": "Dallas Domocile Terminal",\n        "status": "OPERATING"\n      },\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-",\n      "status": "NOT READY"\n    },\n    {\n      "status_description": "Not Ready",\n      "description": "STAMPING MACH ",\n      "assetnum": "L12510",\n      "$alias_this_attr$location": "SHIPPING",\n      "location": {\n        "status_description": "Operating",\n        "description": "Shipping Location",\n        "status": "OPERATING"\n      },\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--",\n      "status": "NOT READY"\n    }\n  ],\n  "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset",\n  "responseInfo": {\n    "nextPage": {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?pageno=2&oslc.select=assetnum%2Cstatus%2Cdescription%2Clocation%2Clocation.description%2Clocation.status&_lid=wilson&oslc.pageSize=2&_lpwd=wilson"\n    },\n    "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?_lid=wilson&_lpwd=wilson&oslc.pageSize=2&oslc.select=assetnum,status,description,location,location.description,location.status",\n    "pagenum": 1\n  }\n}\n')),(0,n.kt)("h3",null,"Aliasing of attributes"),(0,n.kt)("p",null,"You might have noticed the property “$alias_this_attr$location”. What is that?"),(0,n.kt)("p",null,"The name clash of the attribute named “location” with the relation named “location” - both at the Asset object level. In xml world this could have been resolved with namespaces. Here in the json world we want to just rename the property with an alias.\nAliasing thus refers to the process of renaming a mbo attribute in the json domain to avoid name conflicts. If there is a name conflict the json response will mark rename attribute with the prefix “$alias_this_attr$“. To alias this attribute, we can simple use the — operator in the select clause as shown below"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"oslc.select=assetnum,location--mylocation,location.status\n")),(0,n.kt)("p",null,"This will rename the location attribute to “mylocation” in the json domain. Note that — operator only works on attributes and not on object names or relation names. So effectively if an attribute name clashes with an object name or a relation name, the attribute name needs to be aliased."),(0,n.kt)("p",null,"The response json will look like following,"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "member": [\n    {\n      "assetnum": "A6002",\n      "location": {\n        "status_description": "Operating",\n        "status": "OPERATING"\n      },\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_QTYwMDIvRkxFRVQ-",\n      "mylocation": "DALTERM",\n    },\n    {\n      "_rowstamp": "36655",\n      "assetnum": "L12510",\n      "location": {\n        "status_description": "Operating",\n        "status": "OPERATING"\n      },\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--",\n      "mylocation": "SHIPPING",\n    }\n  ],\n  "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset",\n  "responseInfo": {\n    "nextPage": {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?pageno=2&oslc.select=assetnum%2Clocation--mylocation%2Clocation.status&_lid=wilson&lean=1&oslc.pageSize=2&_lpwd=wilson"\n    },\n    "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?_lid=wilson&_lpwd=wilson&oslc.pageSize=2&oslc.select=assetnum,location--mylocation,location.status&lean=1",\n    "pagenum": 1\n  }\n}\n')),(0,n.kt)("h2",null,"Dynamic Select Clause"),(0,n.kt)("h3",null,"1:1 relationship"),(0,n.kt)("p",null,"Asset to Location is a 1:1 relationship and hence the dot notation format works out great and attaches the json object for the location with the member json for MXAPIASSET at the asset header object. Note that the api framework detected a conflict of names - attribute location and the relation named location. Note that the dot notation format is ",(0,n.kt)("inlineCode",{parentName:"p"},"<relation name>[.<relation name>]*.<attribute name>"),". Effectively these relations can be nested too. The api response would bunch attributes at each relation level to form the json object. A sample below might help:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"oslc.select=rel1.a1,rel1.a2,rel1.rel11.a11,rel1.rel11.a12,rel1.rel21.a21\n")),(0,n.kt)("p",null,"Will result in a json like"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "rel1": {\n    "a1": "...",\n    "a2": "...",\n    "rel11": {\n      "a11": "...",\n      "a12": "..."\n    },\n    "rel21": {\n      "a21": "..."\n    }\n  }\n}\n')),(0,n.kt)("h3",null,"1:many relationship"),(0,n.kt)("p",null,"As you might have noticed that dot notations produce json objects. But if we need related data that would be 1:*, we would need a slight variation of this. A real example would be Asset:Workorder. An asset may have many open workorders and say we want to get details about all open workorders for my set of Assets. The select clause will look like below"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'GET oslc/os/mxapiasset?_lid=wilson&_lpwd=wilson&oslc.pageSize=2&oslc.select=assetnum,rel.openwo{wonum,description}&oslc.where=openwo.wonum="*"\n')),(0,n.kt)("p",null,"This “rel” notation has the format - ",(0,n.kt)("inlineCode",{parentName:"p"},"rel.<relation name>")," (For example, rel.openwo). This will result in a json array property named ",(0,n.kt)("inlineCode",{parentName:"p"},"<relation name>"),".  The sample output format would be like below."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "member": [\n    {\n      "openwo": [\n        {\n          "description": "11400 PM work",\n          "wonum": "43013"\n        },\n        {\n          "description": "Inspection",\n          "wonum": "41081"\n        },\n        {\n          "description": "Inspection and Certification",\n          "wonum": "41041"\n        },\n        {\n          "description": "11400 PM WORK",\n          "wonum": "43014"\n        },\n        {\n          "description": "11400 PM work",\n          "wonum": "43012"\n        },\n        {\n          "description": "Inspection and Certification",\n          "wonum": "42002"\n        },\n        {\n          "description": "Inspection",\n          "wonum": "40122"\n        },\n        {\n          "description": "11400 PM WORK",\n          "wonum": "43011"\n        },\n        {\n          "description": "11400 PM work",\n          "wonum": "43015"\n        }\n      ],\n\n      "assetnum": "11400",\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_MTE0MDAvQkVERk9SRA--",\n    },\n    {\n      "openwo": [\n        {\n          "description": "Record amperage and voltage with motor operating.",\n          "wonum": "1006-70"\n        },\n        {\n          "description": "Check for leaks.",\n          "wonum": "1006-30"\n        },\n        {\n          "description": "Check pump float switch.",\n          "wonum": "1006-20"\n        },\n        {\n          "description": "Check pump operation.",\n          "wonum": "1006-10"\n        },\n        {\n          "description": "Record amperage and voltage with motor operating.",\n          "wonum": "1002-70"\n        },\n        {\n          "description": "Inspect main disconnect and all electrical.",\n          "wonum": "1002-40"\n        },\n        {\n          "description": "Inspect floats.",\n          "wonum": "1002-60"\n        },\n        {\n          "description": "Clean contactors and contactor compartment.",\n          "wonum": "1002-50"\n        },\n        {\n          "description": "Feedwater Pump Service",\n          "wonum": "1006"\n        },\n        {\n          "description": "Inspect floats and replace main gasket on housing.",\n          "wonum": "1006-60"\n        },\n        {\n          "description": "Clean contactors and contactor compartment.",\n          "wonum": "1006-50"\n        },\n        {\n          "description": "Check for leaks.",\n          "wonum": "1002-30"\n        },\n        {\n          "description": "Inspect main disconnect and all electrical.",\n          "wonum": "1006-40"\n        },\n        {\n          "description": "Rebuild Feedwater Pump",\n          "wonum": "1002"\n        },\n        {\n          "description": "Replace impeller, shaft, seal and housing.",\n          "wonum": "1002-20"\n        },\n        {\n          "description": "Check pump operation.",\n          "wonum": "1002-10"\n        },\n        {\n          "description": "11450 BREAKDOWN",\n          "wonum": "91091"\n        }\n      ],\n      "_rowstamp": "36666",\n      "_imagelibref": "http:\\/\\/localhost\\/maximo\\/oslc\\/images\\/109",\n      "assetnum": "11450",\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_MTE0NTAvQkVERk9SRA--",\n    }\n  ],\n  "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset",\n  "responseInfo": {\n    "nextPage": {\n      "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?pageno=2&oslc.select=assetnum%2Crel.openwo%7Bwonum%2Cdescription%7D&_lid=wilson&oslc.where=openwo.wonum%3D%22*%22&oslc.pageSize=2&_lpwd=wilson"\n    },\n    "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset?_lid=wilson&_lpwd=wilson&oslc.pageSize=2&oslc.select=assetnum,rel.openwo{wonum,description}&oslc.where=openwo.wonum=%22*%22",\n    "pagenum": 1\n  }\n}\n')),(0,n.kt)("p",null,"As like the dot notation, this rel notation can be nested too. The nesting got to happen as part of its attribute set. As usual a sample will be much easier to talk to."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"oslc.select=rel.rel1{attr1,attr2,rel.rel2{attr21,attr22},rel.rel3{*}, rel4.attr4}\n")),(0,n.kt)("p",null,"Here the rel2, rel3 are samples of nesting the rel notation. The rel4.attr4 showcases the fact that you can embed a dot notation within a rel notation but not the other way round.The rel3 also demonstrates that you can just use ",(0,n.kt)("em",{parentName:"p"}," to get all attributes for that target object. Although here it gets tricky as what would ")," imply - all persistent attributes? Or all persistent and non-persistent attributes combined?"),(0,n.kt)("p",null,"So the rule of thumb we followed is as below:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If the target object is a persistent object, the ",(0,n.kt)("em",{parentName:"li"}," notation will include all persistent attributes for that object. You would need to explicitly request the non-persistent attributes to get them included. For example - rel.openwo{"),",displaywonum} where displaywonum is a non-persistent attribute in the target object."),(0,n.kt)("li",{parentName:"ul"},"If the target object is a non-persistent object, the * notation will include all (non-persistent) attributes for that object as it has not persistent attributes anyways.")),(0,n.kt)("p",null,"Note that these dot notation attributes and the rel attributes can be used at any level of the Object structure. For example we count use it in assetmeters like below"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"oslc.select=assetnum,status,assetmeter{*,rel.rel1{attr1,attr2},rel2.attr3}\n")),(0,n.kt)("p",null,"A demo of this can be see here Dynamic Select Clause."),(0,n.kt)("h2",null,"Traversing to related MboSets"),(0,n.kt)("p",null,"Traversing to related MboSets can be done by using the relation name as part of the GET uri call. Sample below shows how we can move from asset to workorder using the relationship name."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset/{rest id}/openwo?oslc.select=*\n")),(0,n.kt)("p",null,"As you can see, we are using the openwo relationship name to traverse to the workorder collection from a given asset. Now the resulting json will be a serialized response based on the Workorder mbo whicb by default will not contain any non-persistent attributes. For non-persistent attributes we need to request for them explicitly in the oslc.select clause."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset/{rest id}/openwo?oslc.select=*,npattr1,npattr2\n")),(0,n.kt)("p",null,"However in lot of cases, you would prefer getting those response as a Object Structure collection resource. We have a notation for doing just that."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset/{rest id}/openwo.mxapiwodetail?oslc.select=*\n")),(0,n.kt)("p",null,"Note the way we appended the Object Structure name at the end of the relation name with a dot separator. With this request you will get all Workorder records returned as mxapiwodetail records. Another variation of this api that we support is shown below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset/{rest id}/openwo?oslc.select=*&responseos=mxapiwodetail\n")),(0,n.kt)("p",null,"In both cases (ie mbo vs object structure), you can use all the collection api query parameters like oslc.select and oslc.where and paging etc to filter, sort and view the collection as you need. Note that this is recursive ie we can go as deep nested as we want using the relation name and the rest id pair. An example is shown below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapiasset/{rest id}/openwo/{rest id}/jobplan/?oslc.select=*\n")),(0,n.kt)("p",null,"Note these rest ids are derived from the uris that come back from the server. The client code should not need to generate these ids. It should just leverage the uris and append the relation name token to it to traverse down from the selected record. We have seen in previous sections how related MboSets can be inlined (inside the parent Mbo/set data) using the rel notation. This is different in the sense that we are not inlining the related MboSet, rather we are treating it just like another independent collection resource."),(0,n.kt)("h1",null,"Querying data - Related data"),(0,n.kt)("p",null,"So far we have been discussing how to fetch the mbo and related mbo attributes for the object structure. We are now going to cover the other forms to related data and how to request them explicitly or implicitly."),(0,n.kt)("h2",null,"Images"),(0,n.kt)("p",null,"In Maximo we have a image repository (imglib table) that stores the image avatars for the Maximo managed resources (likes Assets, Items, Person etc). The api framework maintains a cache of the image references. While fetching the resource details, if the system detects an image reference, the uri for the image document will be added to the resulting json (",(0,n.kt)("em",{parentName:"p"},"_imagelibref"),"). Maximo image repository supports storing the images in Maximo database or in an external repository - provided the repository exposes a simple uri based mechanism to load the images. To facilitate that, the IMGLIB table has 2 attributes - imguri and endpointname. The endpointname points to the Integration endpoint - which say is the http(s) endpoint and the imguri refers to the url of the image which is used by the http endpoint to fetch the image. It’s possible to use a custom endpoint that be leveraged to handle more complex urls. Bulk loading of images can be done using a sql command line tools. Associating images to any Maximo Mbo’s can be done using REST apis. The sample REST api below associates an Asset with an image."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"POST /oslc/os/mxapiasset/{id}?action=system:addimage \ncustom-encoding: base64\nx-method-override:PATCH\nSlug: <maps to image name in imglib> Content-type: <maps to mime type in imglib>\n\n<HTTP body contains the base64 encoded image bytes>\n")),(0,n.kt)("p",null,"Or"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'POST /oslc/os/mxapiasset/{id}?action=system:addimage \nx-method-override:PATCH\nSlug: <maps to image name in imglib> \nContent-type: <maps to mime type in imglib>\n\nBody:\n{\n"imguri":<uri for the externally sourced image>, \n"endpointname":"..."\n}\n\n')),(0,n.kt)("p",null,"In the same line, we have an api to delete the associated image"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"POST /oslc/os/mxapiasset/{id}?action=system:deleteimage \nx-method-override:PATCH\n")),(0,n.kt)("h2",null,"Database Aggregation functions"),(0,n.kt)("p",null,"Maximo REST api supports using the database aggregation (max,min,avg,sum,count and exists) functions on related MboSets. For example say we want to apply these functions on the open workorders for an asset. The sample api below will use all the aggregation functions."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'GET /oslc/os/mxapiasset/{rest id}?oslc.select=assetnum,openwo.actlabhrs._dbavg,openwo.actlabhrs._dbsum,openwo.actlabhrs._dbmax,openwo.actlabhrs._dbmin,openwo._dbcount&oslc.where=openwo.wonum="*"\n')),(0,n.kt)("p",null,"As you can see the format for the sum,avg,max and min are ",(0,n.kt)("inlineCode",{parentName:"p"},"<relation name>.<target attr name>._<operation>"),". Note that the supported operations are the usual suspects dbsum (for sum), dbavg (for avg), dbmax (for max) and dbmin (for min). Their format is always a dot (.) separated 3 token format which includes a relationship name token followed by an attribute name followed by the underscore prefixed ",(0,n.kt)("inlineCode",{parentName:"p"},"(_)")," operation to perform on that related attribute."),(0,n.kt)("p",null,"For the count (operation dbcount) we have a 2 token format which includes the relation name as the first token and the operation name (_dbcount). It will evaluate the count on that related MboSet. The json response would look like below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n  "openwo": {\n    "_dbcount": 17,\n    "actlabhrs": {\n      "_dbsum": 2.5,\n      "_dbmax": 2.5,\n      "_dbavg": 0.14705882352941177,\n      "_dbmin": 0.0\n    }\n  },\n  "_rowstamp": "36666",\n  "_imagelibref": "http:\\/\\/localhost\\/maximo\\/oslc\\/images\\/109",\n  "assetnum": "11450",\n  "href": "http:\\/\\/localhost\\/maximo\\/oslc\\/os\\/mxapiasset\\/_MTE0NTAvQkVERk9SRA--",\n}\n')),(0,n.kt)("h2",null,"Bookmarks"),(0,n.kt)("p",null,"Maximo bookmarks can be leveraged with the rest apis."),(0,n.kt)("h2",null,"Cache properties"),(0,n.kt)("p",null,"To be added?"),(0,n.kt)("h2",null,"Formula properties"),(0,n.kt)("p",null,"We can select calculated values without needing to create non persistent attributes. This can be done by leveraging the tight integration between the rest apis and the Object formula feature. An example of the formula properties would help explain it better."),(0,n.kt)("p",null,"Say we create a object formula called MYREPLACECOST for Asset object (using the Object Formula action from the Database Configuration application). The formula can be defined as purchaseprice/NVL(priority,1). We can then select that formula property associated with the asset object using the api select clause as shown below"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET /oslc/os/mxAPIasset?oslc.select=assetnum,status,exp.myreplacecost\n")),(0,n.kt)("p",null,"The response would be as if myreplacecost was an attribute of the asset mbo."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n  "member": [\n    {\n      "assetnum": "A6002",\n      "myreplacecost": 39000.0\n    },\n    {\n      "assetnum": "L12510",\n      "myreplacecost": 1450.0\n    }\n  ],\n  "href": "oslc\\/os\\/mxapiasset",\n  "responseInfo": {\n    "nextPage": {\n      "href": "oslc\\/os\\/mxapiasset?pageno=2&oslc.select=assetnum%2Cexp.myreplacecost&_lid=wilson&oslc.pageSize=2&_lpwd=wilson"\n    },\n    "href": "oslc\\/os\\/mxapiasset?_lid=wilson&_lpwd=wilson&oslc.pageSize=2&oslc.select=assetnum,exp.myreplacecost",\n    "pagenum": 1\n  }\n}\n')),(0,n.kt)("p",null,"Similar approach will work for an individual resource"),(0,n.kt)("p",null,"GET /oslc/os/mxpaiasset/{rest id}?oslc.select=assetnum,status,exp.myreplacecost"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n  "assetnum": "L12510",\n  "href": "oslc\\/os\\/mxapiasset\\/_TDEyNTEwL0xBUkVETw--",\n  "myreplacecost": 1450.0\n}\n')),(0,n.kt)("p",null,"Note that this can be considered as a great alternative to defining non-persistent attributes just for the sake of holding calculated values. This acts like a dynamic attribute which does not need db config or admin mode."),(0,n.kt)("p",null,"For more information on Maximo Formula feature please visit Maximo Formula."),(0,n.kt)("h2",null,"Federated resource data"),(0,n.kt)("p",null,"To be added?"))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-query-selecting-mdx-f34d1a1cbda7c2fea60d.js.map
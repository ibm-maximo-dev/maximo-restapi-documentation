"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[6521],{3624:function(e,t,a){a.d(t,{Z:function(){return N}});var n=a(7294),o=a(8650),l=a.n(o),r=a(1597),i=a(811),s=a(87),m=a(5900),c=a.n(m),h=function(e){var t,a=e.title,o=e.theme,l=e.tabs,r=void 0===l?[]:l;return n.createElement("div",{className:c()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=r.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===o,t))},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12"},n.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},p=function(e){var t=e.relativePagePath,a=e.repository,o=(0,r.useStaticQuery)("1364590287").site.siteMetadata.repository,l=a||o,i=l.baseUrl,s=l.subDirectory,m=i+"/edit/"+l.branch+s+"/src/pages"+t;return i?n.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},n.createElement("div",{className:"bx--col"},n.createElement("a",{className:"EditLink-module--link--IDrl1",href:m},"Edit this page on GitHub"))):null},u=a(4703),d=a(1721),f=function(e){function t(){return e.apply(this,arguments)||this}return(0,d.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,o=e.slug,i=o.split("/").filter(Boolean).slice(-1)[0],s=a.map((function(e){var t,a=l()(e,{lower:!0,strict:!0}),s=a===i,m=new RegExp(i+"/?(#.*)?$"),h=o.replace(m,a);return n.createElement("li",{key:e,className:c()((t={},t["PageTabs-module--selected-item--aBB0K"]=s,t),"PageTabs-module--list-item--024o6")},n.createElement(r.Link,{className:"PageTabs-module--link--Kz-7R",to:""+h},e))}));return n.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},n.createElement("div",{className:"bx--grid"},n.createElement("div",{className:"bx--row"},n.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},n.createElement("nav",{"aria-label":t},n.createElement("ul",{className:"PageTabs-module--list--xLqxG"},s))))))},t}(n.Component),b=f,g=a(7296),k=a(5387),y=a(3732),E=function(e){var t=e.date,a=new Date(t);return t?n.createElement(y.X2,{className:"last-modified-date-module--row--XJoYQ"},n.createElement(y.sg,null,n.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},N=function(e){var t=e.pageContext,a=e.children,o=e.location,m=e.Title,c=t.frontmatter,d=void 0===c?{}:c,f=t.relativePagePath,y=t.titleType,N=d.tabs,w=d.title,T=d.theme,v=d.description,x=d.keywords,C=d.date,P=(0,k.Z)().interiorTheme,_=(0,r.useStaticQuery)("2456312558").site.pathPrefix,q=_?o.pathname.replace(_,""):o.pathname,B=N?q.split("/").filter(Boolean).slice(-1)[0]||l()(N[0],{lower:!0}):"",M=T||P;return n.createElement(s.Z,{tabs:N,homepage:!1,theme:M,pageTitle:w,pageDescription:v,pageKeywords:x,titleType:y},n.createElement(h,{title:m?n.createElement(m,null):w,label:"label",tabs:N,theme:M}),N&&n.createElement(b,{title:w,slug:q,tabs:N,currentTab:B}),n.createElement(g.Z,{padded:!0},a,n.createElement(p,{relativePagePath:f}),n.createElement(E,{date:C})),n.createElement(u.Z,{pageContext:t,location:o,slug:q,tabs:N,currentTab:B}),n.createElement(i.Z,null))}},7248:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return i},default:function(){return c}});var n=a(3366),o=(a(7294),a(4983)),l=a(3624),r=["components"],i={},s={_frontmatter:i},m=l.Z;function c(e){var t=e.components,a=(0,n.Z)(e,r);return(0,o.kt)(m,Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This section explains how to filter, sort or limit (paging) child data sets while being inlined within their parent data set. All the query parameters for the child object collection operations follow a naming pattern that is ",(0,o.kt)("inlineCode",{parentName:"p"},"<mbo name>.<relation name>.<operator>"),". The MBO name token refers to the parent MBO name for the child MboSet. The relation name is the relation name from the parent MBO to the child MboSet. The operator determines the type of inline operation that you are trying to apply on the child collection."),(0,o.kt)("p",null,"The following are the types of query parameters that are available:"),(0,o.kt)("h2",null,"Where Filter"),(0,o.kt)("p",null,"The format of this query parameter is ",(0,o.kt)("inlineCode",{parentName:"p"},"<mbo_name>.<relation_name>.where"),". This query sets the WHERE clause filter for the child object that is identified by the ",(0,o.kt)("strong",{parentName:"p"},"mbo_name")," parent MBO and the ",(0,o.kt)("strong",{parentName:"p"},"relation_name")," relation name. The syntax for the WHERE clause follows the ",(0,o.kt)("inlineCode",{parentName:"p"},"oslc.where")," format with the target MboSet in context. For example, to filter on the ",(0,o.kt)("inlineCode",{parentName:"p"},"polines")," in the MXPO object structure, use the follow format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'GET /oslc/os/mxapipo?oslc.select=ponum,status,poline{polinenum,itemnum,linec ost}&po.poline.where=itemnum="*" and linecost>100.0\n')),(0,o.kt)("p",null,"The polineâ€™s that have an itemnum and line cost that is greater than 100 is shown and does not impact the selection of the PO records."),(0,o.kt)("p",null,"To support the ",(0,o.kt)("strong",{parentName:"p"},"or")," clause on the ",(0,o.kt)("strong",{parentName:"p"},"where")," clause (instead of the default ",(0,o.kt)("strong",{parentName:"p"},"and")," clause), the query parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"<mbo name>.<relation name>.opmodeor")," which if set to ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),", treats the where clause specified above as an ",(0,o.kt)("strong",{parentName:"p"},"or")," clause. This results in fetching all lines that have either a ",(0,o.kt)("inlineCode",{parentName:"p"},"itemnum")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},"linecost")," that is greater than 100."),(0,o.kt)("h2",null,"Timeline queries"),(0,o.kt)("p",null,"The format for these query parameters are ",(0,o.kt)("inlineCode",{parentName:"p"},"<mbo_name>.<relation_name>.tlrange")," for the time line range (eg ",(0,o.kt)("inlineCode",{parentName:"p"},"-3M")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"+2Y"),") and ",(0,o.kt)("inlineCode",{parentName:"p"},"<mbo_name>.<relation_name>.tlattribute")," (the attribute name of the child object on which to base the time-line on) following in the lines of the Timeline queries."),(0,o.kt)("p",null,"These query child object filters examines and limits the child objects in the inlined with the root object of the object structure. If you need to show those child objects in a list or tabular form and then page through and filter them, then you can use the relation name in the URI to traverse to that set. By traversing to the set, you can operate on the child collection independently and be able to page the collection."),(0,o.kt)("h2",null,"Sorting"),(0,o.kt)("p",null,"The format of this query parameter is ",(0,o.kt)("inlineCode",{parentName:"p"},"<mbo_name>.<relation_name>.orderBy"),". This query sorts the child collection, follows the oslc.orderBy format, and is applied to the context of the child collection."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /oslc/os/mxapipo?oslc.select=ponum,status,poline{polinenum,itemnum,linecost}&po.poline.orderBy=-linecost&lean=1\n")),(0,o.kt)("p",null,"The results shows a descending sort list on the linecost for the poline collection."),(0,o.kt)("h2",null,"Paging - Limit Filter"),(0,o.kt)("p",null,"The format for this query parameter is ",(0,o.kt)("inlineCode",{parentName:"p"},"<mbo_name>.<relation_name>.limit"),". This query sets the limit to the number of rows to be retrieved for the child collection."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /oslc/os/mxpo?oslc.select=ponum,status,poline{polinenum,itemnum,linecost}&po.poline.limit=1&lean=1\n")),(0,o.kt)("p",null,"The results show the limit the number of polines loaded to only 1 for each purchase order in the response."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-query-child-mdx-d637d2a8bac6de764b0f.js.map